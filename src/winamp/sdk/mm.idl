// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 9.11.2011 14:13:56 (- $Rev: 12980 $, 9840203).

[
  uuid(E602ED16-8EF9-4F08-B09F-6F6E8306C51B),
  version(1.0),
  helpstring("MediaMonkey Library")

]
library SongsDB
{

  importlib("stdole2.tlb");

  interface ISDBApplication;
  dispinterface ISDBApplicationEvents;
  interface ISDBAlbum;
  coclass SDBAlbum;
  interface ISDBAlbums;
  coclass SDBAlbums;
  interface ISDBArtist;
  coclass SDBArtist;
  interface ISDBArtists;
  coclass SDBArtists;
  interface ISDBCommonDialog;
  coclass SDBCommonDialog;
  interface ISDBDatabase;
  coclass SDBDatabase;
  interface ISDBIniFile;
  coclass SDBIniFile;
  interface ISDBMedia;
  coclass SDBMedia;
  interface ISDBPlayer;
  coclass SDBPlayer;
  interface ISDBProgress;
  coclass SDBProgress;
  interface ISDBSongData;
  coclass SDBSongData;
  interface ISDBSongIterator;
  coclass SDBSongIterator;
  interface ISDBSongList;
  coclass SDBSongList;
  interface ISDBScriptControl;
  coclass SDBScriptControl;
  interface ISDBDropTarget;
  coclass SDBDropTarget;
  coclass SDBDropTargetNext;
  coclass SDBDropTargetLast;
  interface ISDBPlaylist;
  coclass SDBPlaylist;
  interface ISDBPlaylists;
  coclass SDBPlaylists;
  interface ISDBTreeNode;
  dispinterface ISDBTreeNodeEvents;
  interface ISDBTree;
  coclass SDBTree;
  interface ISDBTracksWindow;
  coclass SDBTracksWindow;
  interface ISDBDBIterator;
  coclass SDBDBIterator;
  interface ISDBUIForm;
  dispinterface ISDBUIFormEvents;
  coclass SDBUIForm;
  interface ISDBUI;
  coclass SDBUI;
  interface ISDBUIButton;
  dispinterface ISDBUIButtonEvents;
  coclass SDBUIButton;
  interface ISDBUIEdit;
  dispinterface ISDBUIEditEvents;
  coclass SDBUIEdit;
  interface ISDBUICommon;
  dispinterface ISDBUICommonEvents;
  interface ISDBUIPanel;
  dispinterface ISDBUIPanelEvents;
  coclass SDBUIPanel;
  interface ISDBUICheckBox;
  dispinterface ISDBUICheckBoxEvents;
  coclass SDBUICheckBox;
  interface ISDBUITranspPanel;
  dispinterface ISDBUITranspPanelEvents;
  coclass SDBUITranspPanel;
  interface ISDBUILabel;
  dispinterface ISDBUILabelEvents;
  coclass SDBUILabel;
  interface ISDBUIActiveX;
  dispinterface ISDBUIActiveXEvents;
  coclass SDBUIActiveX;
  interface ISDBRegistry;
  coclass SDBRegistry;
  interface ISDBUIDropDown;
  dispinterface ISDBUIDropDownEvents;
  coclass SDBUIDropDown;
  interface ISDBMenuItem;
  dispinterface ISDBMenuItemEvents;
  coclass SDBMenuItem;
  interface ISDBDevice;
  coclass SDBDevice;
  coclass SDBTreeNode;
  interface ISDBUIRadioButton;
  dispinterface ISDBUIRadioButtonEvents;
  coclass SDBUIRadioButton;
  interface ISDBDeviceList;
  coclass SDBDeviceList;
  interface ISDBTools;
  coclass SDBTools;
  interface ISDBUISpinEdit;
  dispinterface ISDBUISpinEditEvents;
  coclass SDBUISpinEdit;
  coclass SDBApplication;
  interface ISDBFileSystem;
  coclass SDBFileSystem;
  interface ISDBTextFile;
  coclass SDBTextFile;
  interface ISDBTrackSynchStatus;
  coclass SDBTrackSynchStatus;
  interface ISDBAlbumArtList;
  coclass SDBAlbumArtList;
  interface ISDBAlbumArtItem;
  coclass SDBAlbumArtItem;
  interface ISDBImage;
  coclass SDBImage;
  interface ISDBHWEvents;
  coclass SDBHWEvents;
  coclass SDBDropTargetRip;
  interface ISDBUITrackBar;
  dispinterface ISDBUITrackBarEvents;
  coclass SDBUITrackBar;
  interface ISDBUIDockablePanel;
  dispinterface ISDBUIDockablePanelEvents;
  coclass SDBUIDockablePanel;
  interface ISDBTimer;
  dispinterface ISDBTimerEvents;
  coclass SDBTimer;
  coclass SDBUICommon;
  interface ISDBStringList;
  coclass SDBStringList;
  interface ISDBWebSearch;
  coclass SDBWebSearch;
  interface ISDBUIGroupBox;
  dispinterface ISDBUIGroupBoxEvents;
  coclass SDBUIGroupBox;
  interface ISDBUIMultiLineEdit;
  dispinterface ISDBUIMultiLineEditEvents;
  coclass SDBUIMultiLineEdit;
  interface ISDBUIMaskEdit;
  dispinterface ISDBUIMaskEditEvents;
  coclass SDBUIMaskEdit;
  interface ISDBUIListBox;
  dispinterface ISDBUIListBoxEvents;
  coclass SDBUIListBox;
  interface ISDBUITreeList;
  dispinterface ISDBUITreeListEvents;
  coclass SDBUITreeList;
  interface ISDBUITreeListItem;
  dispinterface ISDBUITreeListItemEvents;
  coclass SDBUITreeListItem;
  interface ISDBDownloader;
  coclass SDBDownloader;
  coclass SDBCollections;
  coclass SDBCollection;
  interface ISDBCollection;
  interface ISDBCollections;


  [
    uuid(ECDC03EF-3585-4DC8-B107-99930D66B8F9),
    version(1.0)
  ]
  typedef enum
  {
    MsgBox_Warning = 0,
    MsgBox_Error = 1,
    MsgBox_Information = 2,
    MsgBox_Confirmation = 3
  } EnumMsgBox;

  [
    uuid(B065CD80-7598-4B61-80DC-CADFD5A4AD5F),
    version(1.0)
  ]
  typedef enum
  {
    VCD_None = 0,
    VCD_Cached = 1
  } EnumVCDStatus;

  [
    uuid(F67EE311-E705-472A-83C3-D21A3835F8DB),
    version(1.0)
  ]
  typedef enum
  {
    ChannelsMono = 0,
    ChannelsStereo = 1
  } EnumChannels;

  [
    uuid(7A35E785-6A45-45FC-B3F4-59BF7D9C4313),
    version(1.0)
  ]
  typedef enum
  {
    Preview_None = 0,
    Preview_Exists = 1
  } EnumPreview;

  [
    uuid(9831FB1D-B64C-4E09-A51C-589A2F7F140C),
    version(1.0)
  ]
  typedef enum
  {
    NodePos_InsertBefore = 0,
    NodePos_InsertAfter = 1,
    NodePos_AddChildFirst = 2,
    NodePos_AddChildLast = 3
  } EnumTreeNodePos;

  [
    uuid(78F1CD4A-6722-4B1A-8C76-4FE4CC57E8A2),
    version(1.0)
  ]
  typedef enum
  {
    YesNo_Default = -1,
    YesNo_Yes = 1,
    YesNo_No = 0
  } EnumYesNo;

  [
    uuid(1FAF02F8-A7D3-41F1-9210-A3B12046F136),
    version(1.0),
    helpstring("Dispatch interface for SDBApplication Object"),
    dual,
    oleautomation
  ]
  interface ISDBApplication: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall VersionString([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall CurrentSongList([out, retval] ISDBSongList** Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall SelectedSongList([out, retval] ISDBSongList** Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Player([out, retval] ISDBPlayer** Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall IniFile([out, retval] ISDBIniFile** Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall VersionHi([out, retval] long* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall VersionLo([out, retval] long* Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall Database([out, retval] ISDBDatabase** Value);
    [id(0x0000000A)]
    HRESULT _stdcall MessageBox([in] BSTR MessageText, [in] EnumMsgBox MsgType, [in] VARIANT Buttons, [out, retval] long* Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall VersionRelease([out, retval] long* Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall Progress([out, retval] ISDBProgress** Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall CommonDialog([out, retval] ISDBCommonDialog** Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall AllVisibleSongList([out, retval] ISDBSongList** Value);
    [id(0x000000CA)]
    HRESULT _stdcall Localize([in] BSTR Value, [out, retval] BSTR* translated);
    [id(0x000000CB)]
    HRESULT _stdcall toASCII([in] BSTR Value, [out, retval] BSTR* ASCII);
    [propget, id(0x000000CC)]
    HRESULT _stdcall PlaylistByTitle([in] BSTR Title, [out, retval] ISDBPlaylist** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall MainTree([out, retval] ISDBTree** Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall MainTracksWindow([out, retval] ISDBTracksWindow** Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall ShutdownAfterDisconnect([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall ShutdownAfterDisconnect([in] VARIANT_BOOL Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall IsRunning([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall UI([out, retval] ISDBUI** Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall Registry([out, retval] ISDBRegistry** Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall Objects([in] BSTR Name, [out, retval]  IDispatch** Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall Objects([in] BSTR Name, [in]  IDispatch* Value);
    [id(0x000000D4)]
    HRESULT _stdcall RegisterIcon([in] BSTR Filename, [in] long IconType, [out, retval] long* Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall NewSongData([out, retval] ISDBSongData** Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall Device([out, retval] SDBDevice** Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall ApplicationPath([out, retval] BSTR* Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall MyMusicPath([out, retval] BSTR* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall Tools([out, retval] ISDBTools** Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall NewSongList([out, retval] ISDBSongList** Value);
    [id(0x000000DB)]
    HRESULT _stdcall Format([in] BSTR Text, [in] VARIANT Param1, [in] VARIANT Param2, [in] VARIANT Param3, [out, retval] BSTR* Result);
    [id(0x000000DC)]
    HRESULT _stdcall LocalizedFormat([in] BSTR Text, [in] VARIANT Param1, [in] VARIANT Param2, [in] VARIANT Param3, [out, retval] BSTR* Result);
    [id(0x000000DD)]
    HRESULT _stdcall SelectFolder([in] BSTR Folder, [in] BSTR ShowText, [out, retval] BSTR* Result);
    [propget, id(0x000000DE)]
    HRESULT _stdcall TemporaryFolder([out, retval] BSTR* Value);
    [id(0x000000DF)]
    HRESULT _stdcall ProcessMessages(void);
    [id(0x000000E0)]
    HRESULT _stdcall RegisterIconHandle([in] long IconHandle, [in] long IconType, [out, retval] long* Value);
    [id(0x000000E3)]
    HRESULT _stdcall CreateTimer([in] long Interval, [out, retval] ISDBTimer** Timer);
    [propget, id(0x000000E1)]
    HRESULT _stdcall WebControl([out, retval]  IDispatch** Value);
    [id(0x000000E2)]
    HRESULT _stdcall LocalizeGen([in] BSTR LangFile, [in] BSTR Value, [out, retval] BSTR* translated);
    [propget, id(0x000000E4)]
    HRESULT _stdcall CursorType([out, retval] long* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall CursorType([in] long Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall NewStringList([out, retval] ISDBStringList** Value);
    [id(0x000000E7)]
    HRESULT _stdcall RefreshScriptItems(void);
    [id(0x000000E6)]
    HRESULT _stdcall IsKnownFileType([in] BSTR Filename, [out, retval] VARIANT_BOOL* Result);
    [propget, id(0x000000E8)]
    HRESULT _stdcall IconsPath([out, retval] BSTR* Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall EqualizerPath([out, retval] BSTR* Value);
    [propget, id(0x000000EA)]
    HRESULT _stdcall SkinsPath([out, retval] BSTR* Value);
    [propget, id(0x000000EB)]
    HRESULT _stdcall PluginsPath([out, retval] BSTR* Value);
    [propget, id(0x000000EC)]
    HRESULT _stdcall ScriptsPath([out, retval] BSTR* Value);
    [propget, id(0x000000ED)]
    HRESULT _stdcall VersionBuild([out, retval] long* Value);
    [propget, id(0x000000EE)]
    HRESULT _stdcall LocalScriptsPath([out, retval] BSTR* Value);
    [propget, id(0x000000EF)]
    HRESULT _stdcall CurrentScriptPath([out, retval] BSTR* Value);
    [propget, id(0x000000F0)]
    HRESULT _stdcall ScriptsIniFile([out, retval] BSTR* Value);
    [propget, id(0x000000F1)]
    HRESULT _stdcall GlobalScriptsPath([out, retval] BSTR* Value);
    [propget, id(0x000000F2)]
    HRESULT _stdcall ComServerUIActive([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000F2)]
    HRESULT _stdcall ComServerUIActive([in] VARIANT_BOOL Value);
    [propget, id(0x000000F3)]
    HRESULT _stdcall Downloader([out, retval] ISDBDownloader** Value);
    [propget, id(0x000000F4)]
    HRESULT _stdcall UseAlbumGain([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000F5)]
    HRESULT _stdcall LocalPluginsPath([out, retval] BSTR* Value);
    [propget, id(0x000000F6)]
    HRESULT _stdcall CurrentAddonInstallRoot([out, retval] BSTR* Value);
    [propget, id(0x000000F7)]
    HRESULT _stdcall VisibleCollectionsCount([out, retval] long* Value);
    [propget, id(0x000000F8)]
    HRESULT _stdcall VisibleCollectionID([in] long Index, [out, retval] long* Value);
    [propget, id(0x000000F9)]
    HRESULT _stdcall PlaylistByID([in] long ID, [out, retval] ISDBPlaylist** Value);
    [propget, id(0x000000FA)]
    HRESULT _stdcall Collections([out, retval] ISDBCollections** Value);
  };

  [
    uuid(5592C36F-B292-440A-9547-70653F1386B5),
    version(1.0),
    helpstring("Dispatch interface for SDBAlbum Object"),
    dual,
    oleautomation
  ]
  interface ISDBAlbum: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Artist([out, retval] ISDBArtist** Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall ID([out, retval] long* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall Name([in] BSTR Value);
    [id(0x00000005)]
    HRESULT _stdcall UpdateDB(void);
    [propget, id(0x000000C9)]
    HRESULT _stdcall AlbumArt([out, retval] SDBAlbumArtList** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Tracks([out, retval] SDBSongList** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall AlbumLength([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall AlbumLengthString([out, retval] BSTR* Value);
  };

  [
    uuid(831CFDF3-C029-4971-A427-3F2AB6822AC4),
    version(1.0),
    helpstring("Dispatch interface for SDBAlbums Object"),
    dual,
    oleautomation
  ]
  interface ISDBAlbums: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Item([in] long Index, [out, retval] ISDBAlbum** Value);
    [id(0x000000C9)]
    HRESULT _stdcall Sort(void);
    [id(0x000000CA)]
    HRESULT _stdcall SortByArtist(void);
  };

  [
    uuid(28DD96C6-E8D5-4286-B2D4-46CE858A30D8),
    version(1.0),
    helpstring("Dispatch interface for SDBArtist Object"),
    dual,
    oleautomation
  ]
  interface ISDBArtist: IDispatch
  {
    [propget, id(0x00000002)]
    HRESULT _stdcall Comment([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall Comment([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall Name([in] BSTR Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall ID([out, retval] long* Value);
    [id(0x00000005)]
    HRESULT _stdcall UpdateDB(void);
  };

  [
    uuid(3C8E4F34-9D8A-4461-BE8D-C6A877586999),
    version(1.0),
    helpstring("Dispatch interface for SDBArtists Object"),
    dual,
    oleautomation
  ]
  interface ISDBArtists: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Item([in] long Index, [out, retval] ISDBArtist** Value);
    [id(0x000000C9)]
    HRESULT _stdcall Sort(void);
  };

  [
    uuid(492548A0-735F-4638-ABF8-6B98581D3718),
    version(1.0),
    helpstring("Dispatch interface for SDBCommonDialog Object"),
    dual,
    oleautomation
  ]
  interface ISDBCommonDialog: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall DefaultExt([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall DefaultExt([in] BSTR Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Filter([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall Filter([in] BSTR Value);
    [id(0x00000003)]
    HRESULT _stdcall ShowOpen(void);
    [id(0x00000004)]
    HRESULT _stdcall ShowSave(void);
    [propget, id(0x00000005)]
    HRESULT _stdcall Ok([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall InitDir([out, retval] BSTR* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall InitDir([in] BSTR Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall Flags([out, retval] long* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall Flags([in] long Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall FilterIndex([out, retval] long* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall FilterIndex([in] long Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall Title([out, retval] BSTR* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall Title([in] BSTR Value);
  };

  [
    uuid(4E33B34D-4E10-458F-9462-9168295B3906),
    version(1.0),
    helpstring("Dispatch interface for SDBDatabase Object"),
    dual,
    oleautomation
  ]
  interface ISDBDatabase: IDispatch
  {
    [id(0x00000001)]
    HRESULT _stdcall ExecSQL([in] BSTR SQL);
    [id(0x00000002)]
    HRESULT _stdcall QuerySongs([in] BSTR AddSQL, [out, retval]  IDispatch** Value);
    [id(0x000000C9)]
    HRESULT _stdcall OpenSQL([in] BSTR SQL, [out, retval]  IDispatch** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall DatabaseID([out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Path([out, retval] BSTR* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ActiveFilterQuery([out, retval] BSTR* Value);
    [id(0x000000CD)]
    HRESULT _stdcall BeginTransaction(void);
    [id(0x000000CE)]
    HRESULT _stdcall Commit(void);
    [propget, id(0x000000D0)]
    HRESULT _stdcall GetFilterQuery([in] long ID, [out, retval] BSTR* Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall ActiveFilterID([out, retval] long* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall ActiveFilterID([in] long Value);
    [id(0x000000CF)]
    HRESULT _stdcall ForceCommit(void);
    [propget, id(0x000000D2)]
    HRESULT _stdcall GetAutoPlaylistQuery([in] long ID, [out, retval] BSTR* Value);
  };

  [
    uuid(3EF2F592-68E1-4E74-BCB4-5ED877E221D1),
    version(1.0),
    helpstring("Dispatch interface for SDBIniFile Object"),
    dual,
    oleautomation
  ]
  interface ISDBIniFile: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall StringValue([in] BSTR Section, [in] BSTR Ident, [out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall StringValue([in] BSTR Section, [in] BSTR Ident, [in] BSTR Value);
    [id(0x000000C9)]
    HRESULT _stdcall DeleteKey([in] BSTR Section, [in] BSTR Key);
    [id(0x000000CA)]
    HRESULT _stdcall DeleteSection([in] BSTR Section);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Sections([out, retval] SDBStringList** Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Keys([in] BSTR Section, [out, retval] SDBStringList** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall IntValue([in] BSTR Section, [in] BSTR Ident, [out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall IntValue([in] BSTR Section, [in] BSTR Ident, [in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall BoolValue([in] BSTR Section, [in] BSTR Ident, [out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall BoolValue([in] BSTR Section, [in] BSTR Ident, [in] VARIANT_BOOL Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall ValueExists([in] BSTR Section, [in] BSTR Ident, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D0)]
    HRESULT _stdcall Flush(void);
    [id(0x000000D1)]
    HRESULT _stdcall Apply(void);
  };

  [
    uuid(F6E541E9-B168-4C16-9408-D73ABC5CD445),
    version(1.0),
    helpstring("Dispatch interface for SDBMedia Object"),
    dual,
    oleautomation
  ]
  interface ISDBMedia: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall ID([out, retval] long* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall MediaLabel([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall MediaLabel([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall SerialNumber([out, retval] long* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall SerialNumber([in] long Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall DriveType([out, retval] long* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall DriveType([in] long Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall DriveLetter([out, retval] long* Value);
  };

  [
    uuid(B3B39023-04D8-4B19-A769-27E66D1A47BB),
    version(1.0),
    helpstring("Dispatch interface for SDBPlayer Object"),
    dual,
    oleautomation
  ]
  interface ISDBPlayer: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall CurrentPlaylist([out, retval] ISDBSongList** Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall CurrentSongList([out, retval] ISDBSongList** Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall CurrentSongIndex([out, retval] long* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall CurrentSongIndex([in] long Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Panning([out, retval] double* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall Panning([in] double Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Volume([out, retval] double* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall Volume([in] double Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall PlaylistCount([out, retval] long* Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall PlaylistItems([in] long Index, [out, retval] ISDBSongData** Value);
    [id(0x00000008)]
    HRESULT _stdcall PlaylistClear(void);
    [id(0x00000009)]
    HRESULT _stdcall PlaylistDelete([in] long Index);
    [id(0x0000000A)]
    HRESULT _stdcall PlaylistAddTrack([in] ISDBSongData* Song);
    [id(0x0000000B)]
    HRESULT _stdcall PlaylistAddTracks([in] ISDBSongList* Songs);
    [id(0x0000000C)]
    HRESULT _stdcall PlaylistMoveTrack([in] long Index, [in] long NewIndex);
    [id(0x0000000D)]
    HRESULT _stdcall Next(void);
    [id(0x0000000F)]
    HRESULT _stdcall Pause(void);
    [id(0x00000010)]
    HRESULT _stdcall Play(void);
    [id(0x00000011)]
    HRESULT _stdcall Previous(void);
    [id(0x00000012)]
    HRESULT _stdcall Stop(void);
    [propget, id(0x000000C9)]
    HRESULT _stdcall isPlaying([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall isPaused([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall CurrentSong([out, retval] ISDBSongData** Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CurrentSongLength([out, retval] long* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall PlaybackTime([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall PlaybackTime([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall isShuffle([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall isShuffle([in] VARIANT_BOOL Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall isRepeat([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall isRepeat([in] VARIANT_BOOL Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall isAutoDJ([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall isAutoDJ([in] VARIANT_BOOL Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall isCrossfade([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall isCrossfade([in] VARIANT_BOOL Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall isStartingPlayback([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall PlaylistSelected([in] long Index, [out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall PlaylistSelected([in] long Index, [in] VARIANT_BOOL Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall PlaylistFocused([out, retval] long* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall PlaylistFocused([in] long Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall isEqualizer([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall isEqualizer([in] VARIANT_BOOL Value);
    [id(0x000000D6)]
    HRESULT _stdcall LoadEqualizerPreset([in] BSTR Filename);
    [propget, id(0x000000D7)]
    HRESULT _stdcall StopAfterCurrent([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall StopAfterCurrent([in] VARIANT_BOOL Value);
    [id(0x000000D8)]
    HRESULT _stdcall PlaylistInsertTrack([in] long Index, [in] ISDBSongData* Song);
    [id(0x000000D9)]
    HRESULT _stdcall PlaylistInsertTracks([in] long Index, [in] ISDBSongList* Songs);
  };

  [
    uuid(6D6C996E-7C5E-4426-AB6C-9BBD17B63D05),
    version(1.0),
    helpstring("Dispatch interface for SDBProgress Object"),
    dual,
    oleautomation
  ]
  interface ISDBProgress: IDispatch
  {
    [propget, id(0x00000002)]
    HRESULT _stdcall MaxValue([out, retval] long* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall MaxValue([in] long Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Text([out, retval] BSTR* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall Text([in] BSTR Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Value([out, retval] long* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall Value([in] long Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Terminate([out, retval] VARIANT_BOOL* Value);
    [id(0x00000006)]
    HRESULT _stdcall Increase(void);
  };

  [
    uuid(B0E7CB89-90B9-45AB-B8A0-A45F44350F57),
    version(1.0),
    helpstring("Dispatch interface for SDBSongData Object"),
    dual,
    oleautomation
  ]
  interface ISDBSongData: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall ArtistName([out, retval] BSTR* Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall ArtistName([in] BSTR Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall AlbumName([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall AlbumName([in] BSTR Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Title([out, retval] BSTR* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall Title([in] BSTR Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Path([out, retval] BSTR* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall Path([in] BSTR Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Bitrate([out, retval] long* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall Bitrate([in] long Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall FileLength([out, retval] CURRENCY* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall FileLength([in] CURRENCY Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall SongLength([out, retval] long* Value);
    [propput, id(0x00000007)]
    HRESULT _stdcall SongLength([in] long Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall Cached([out, retval] EnumVCDStatus* Value);
    [propput, id(0x00000008)]
    HRESULT _stdcall Cached([in] EnumVCDStatus Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall SampleRate([out, retval] long* Value);
    [propput, id(0x00000009)]
    HRESULT _stdcall SampleRate([in] long Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall Channels([out, retval] EnumChannels* Value);
    [propput, id(0x0000000A)]
    HRESULT _stdcall Channels([in] EnumChannels Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall TrackOrder([out, retval] long* Value);
    [propput, id(0x0000000B)]
    HRESULT _stdcall TrackOrder([in] long Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall Year([out, retval] long* Value);
    [propput, id(0x0000000C)]
    HRESULT _stdcall Year([in] long Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall SongID([out, retval] long* Value);
    [id(0x0000000F)]
    HRESULT _stdcall UpdateDB(void);
    [propget, id(0x00000010)]
    HRESULT _stdcall SongLengthString([out, retval] BSTR* Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall Genre([out, retval] BSTR* Value);
    [propput, id(0x00000011)]
    HRESULT _stdcall Genre([in] BSTR Value);
    [propget, id(0x00000014)]
    HRESULT _stdcall MediaLabel([out, retval] BSTR* Value);
    [propget, id(0x00000015)]
    HRESULT _stdcall BPM([out, retval] long* Value);
    [propput, id(0x00000015)]
    HRESULT _stdcall BPM([in] long Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall VBR([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000016)]
    HRESULT _stdcall VBR([in] VARIANT_BOOL Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall Author([out, retval] BSTR* Value);
    [propput, id(0x00000017)]
    HRESULT _stdcall Author([in] BSTR Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall PlayCounter([out, retval] long* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall PlayCounter([in] long Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall Rating([out, retval] long* Value);
    [propput, id(0x00000019)]
    HRESULT _stdcall Rating([in] long Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall FileModified([out, retval] DATE* Value);
    [propput, id(0x0000001A)]
    HRESULT _stdcall FileModified([in] DATE Value);
    [propget, id(0x0000001B)]
    HRESULT _stdcall Lyricist([out, retval] BSTR* Value);
    [propput, id(0x0000001B)]
    HRESULT _stdcall Lyricist([in] BSTR Value);
    [propget, id(0x0000001D)]
    HRESULT _stdcall Band([out, retval] BSTR* Value);
    [propput, id(0x0000001D)]
    HRESULT _stdcall Band([in] BSTR Value);
    [propget, id(0x0000001E)]
    HRESULT _stdcall Conductor([out, retval] BSTR* Value);
    [propput, id(0x0000001E)]
    HRESULT _stdcall Conductor([in] BSTR Value);
    [propget, id(0x0000001F)]
    HRESULT _stdcall InvolvedPeople([out, retval] BSTR* Value);
    [propput, id(0x0000001F)]
    HRESULT _stdcall InvolvedPeople([in] BSTR Value);
    [propget, id(0x00000020)]
    HRESULT _stdcall OriginalArtist([out, retval] BSTR* Value);
    [propput, id(0x00000020)]
    HRESULT _stdcall OriginalArtist([in] BSTR Value);
    [propget, id(0x00000021)]
    HRESULT _stdcall OriginalLyricist([out, retval] BSTR* Value);
    [propput, id(0x00000021)]
    HRESULT _stdcall OriginalLyricist([in] BSTR Value);
    [propget, id(0x00000022)]
    HRESULT _stdcall OriginalTitle([out, retval] BSTR* Value);
    [propput, id(0x00000022)]
    HRESULT _stdcall OriginalTitle([in] BSTR Value);
    [propget, id(0x00000023)]
    HRESULT _stdcall OriginalYear([out, retval] long* Value);
    [propput, id(0x00000023)]
    HRESULT _stdcall OriginalYear([in] long Value);
    [propget, id(0x00000024)]
    HRESULT _stdcall ISRC([out, retval] BSTR* Value);
    [propput, id(0x00000024)]
    HRESULT _stdcall ISRC([in] BSTR Value);
    [propget, id(0x00000025)]
    HRESULT _stdcall Lyrics([out, retval] BSTR* Value);
    [propput, id(0x00000025)]
    HRESULT _stdcall Lyrics([in] BSTR Value);
    [propget, id(0x00000026)]
    HRESULT _stdcall Comment([out, retval] BSTR* Value);
    [propput, id(0x00000026)]
    HRESULT _stdcall Comment([in] BSTR Value);
    [propget, id(0x00000027)]
    HRESULT _stdcall RatingString([out, retval] BSTR* Value);
    [propput, id(0x00000027)]
    HRESULT _stdcall RatingString([in] BSTR Value);
    [propget, id(0x00000029)]
    HRESULT _stdcall Album([out, retval] ISDBAlbum** Value);
    [propget, id(0x0000002A)]
    HRESULT _stdcall Artist([out, retval] ISDBArtist** Value);
    [propget, id(0x0000002B)]
    HRESULT _stdcall Media([out, retval] ISDBMedia** Value);
    [propget, id(0x0000002C)]
    HRESULT _stdcall Custom1([out, retval] BSTR* Value);
    [propput, id(0x0000002C)]
    HRESULT _stdcall Custom1([in] BSTR Value);
    [propget, id(0x0000002D)]
    HRESULT _stdcall Custom2([out, retval] BSTR* Value);
    [propput, id(0x0000002D)]
    HRESULT _stdcall Custom2([in] BSTR Value);
    [propget, id(0x0000002E)]
    HRESULT _stdcall Custom3([out, retval] BSTR* Value);
    [propput, id(0x0000002E)]
    HRESULT _stdcall Custom3([in] BSTR Value);
    [id(0x0000000D)]
    HRESULT _stdcall _Data([out, retval] long* Value);
    [id(0x00000012)]
    HRESULT _stdcall GetCopy([out, retval]  IDispatch** Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall CachedPath([out, retval] BSTR* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Preview([out, retval] EnumPreview* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall PreviewPath([out, retval] BSTR* Value);
    [id(0x000000CC)]
    HRESULT _stdcall RenameByMask([in] BSTR Mask, [out, retval] VARIANT_BOOL* Result);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Leveling([out, retval] double* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Leveling([in] double Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall PeakValue([out, retval] double* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall PeakValue([in] double Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall _Self([out, retval] long* Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall AlbumArtistName([out, retval] BSTR* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall AlbumArtistName([in] BSTR Value);
    [id(0x000000D1)]
    HRESULT _stdcall MetadataFromFilename(void);
    [id(0x000000D2)]
    HRESULT _stdcall ReadTags([out, retval] VARIANT_BOOL* Value);
    [id(0x000000D3)]
    HRESULT _stdcall WriteTags(void);
    [id(0x000000D4)]
    HRESULT _stdcall UpdateArtist(void);
    [id(0x000000D5)]
    HRESULT _stdcall UpdateAlbum(void);
    [propget, id(0x000000D6)]
    HRESULT _stdcall LastPlayed([out, retval] DATE* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall LastPlayed([in] DATE Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall Tempo([out, retval] BSTR* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall Tempo([in] BSTR Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall Mood([out, retval] BSTR* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall Mood([in] BSTR Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall Occasion([out, retval] BSTR* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall Occasion([in] BSTR Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall Quality([out, retval] BSTR* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall Quality([in] BSTR Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall Publisher([out, retval] BSTR* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall Publisher([in] BSTR Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall Encoder([out, retval] BSTR* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall Encoder([in] BSTR Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall Copyright([out, retval] BSTR* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall Copyright([in] BSTR Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall DateAdded([out, retval] DATE* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall DateAdded([in] DATE Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall ID([out, retval] long* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall ID([in] long Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall IsntInDB([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall IsntInDB([in] VARIANT_BOOL Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall AlbumArt([out, retval] ISDBAlbumArtList** Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall PlaylistOrder([out, retval] long* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall PlaylistOrder([in] long Value);
    [id(0x000000E3)]
    HRESULT _stdcall ParseText([in] BSTR TextData, [in] BSTR Mask, [out, retval] long* Badness);
    [propget, id(0x000000E4)]
    HRESULT _stdcall MusicComposer([out, retval] BSTR* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall MusicComposer([in] BSTR Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall LevelingAlbum([out, retval] double* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall LevelingAlbum([in] double Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall PreGap([out, retval] long* Value);
    [propput, id(0x000000E6)]
    HRESULT _stdcall PreGap([in] long Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall PostGap([out, retval] long* Value);
    [propput, id(0x000000E7)]
    HRESULT _stdcall PostGap([in] long Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall TotalSamples([out, retval] CURRENCY* Value);
    [propput, id(0x000000E8)]
    HRESULT _stdcall TotalSamples([in] CURRENCY Value);
    [id(0x000000E9)]
    HRESULT _stdcall CalculateGapData(void);
    [propget, id(0x000000EA)]
    HRESULT _stdcall GaplessBytes([out, retval] CURRENCY* Value);
    [propput, id(0x000000EA)]
    HRESULT _stdcall GaplessBytes([in] CURRENCY Value);
    [propget, id(0x000000EB)]
    HRESULT _stdcall Bookmark([out, retval] CURRENCY* Value);
    [propput, id(0x000000EB)]
    HRESULT _stdcall Bookmark([in] CURRENCY Value);
    [propget, id(0x000000EC)]
    HRESULT _stdcall isBookmarkable([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000EC)]
    HRESULT _stdcall isBookmarkable([in] VARIANT_BOOL Value);
    [propget, id(0x000000ED)]
    HRESULT _stdcall Custom4([out, retval] BSTR* Value);
    [propput, id(0x000000ED)]
    HRESULT _stdcall Custom4([in] BSTR Value);
    [propget, id(0x000000EE)]
    HRESULT _stdcall Custom5([out, retval] BSTR* Value);
    [propput, id(0x000000EE)]
    HRESULT _stdcall Custom5([in] BSTR Value);
    [propget, id(0x000000EF)]
    HRESULT _stdcall USBDeviceID([out, retval] BSTR* Value);
    [propput, id(0x000000EF)]
    HRESULT _stdcall USBDeviceID([in] BSTR Value);
    [propget, id(0x000000F0)]
    HRESULT _stdcall Grouping([out, retval] BSTR* Value);
    [propput, id(0x000000F0)]
    HRESULT _stdcall Grouping([in] BSTR Value);
    [propget, id(0x000000F1)]
    HRESULT _stdcall TrackOrderStr([out, retval] BSTR* Value);
    [propput, id(0x000000F1)]
    HRESULT _stdcall TrackOrderStr([in] BSTR Value);
    [propget, id(0x000000F2)]
    HRESULT _stdcall DiscNumber([out, retval] long* Value);
    [propput, id(0x000000F2)]
    HRESULT _stdcall DiscNumber([in] long Value);
    [propget, id(0x000000F3)]
    HRESULT _stdcall DiscNumberStr([out, retval] BSTR* Value);
    [propput, id(0x000000F3)]
    HRESULT _stdcall DiscNumberStr([in] BSTR Value);
    [propget, id(0x000000F4)]
    HRESULT _stdcall isShuffleIgnored([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000F4)]
    HRESULT _stdcall isShuffleIgnored([in] VARIANT_BOOL Value);
    [propget, id(0x000000F5)]
    HRESULT _stdcall canCrossfade([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000F5)]
    HRESULT _stdcall canCrossfade([in] VARIANT_BOOL Value);
    [propget, id(0x000000F6)]
    HRESULT _stdcall Date([out, retval] DATE* Value);
    [propput, id(0x000000F6)]
    HRESULT _stdcall Date([in] DATE Value);
    [propget, id(0x000000F7)]
    HRESULT _stdcall DateDBModified([out, retval] DATE* Value);
    [id(0x000000F8)]
    HRESULT _stdcall ReadTagsAsExt([in] BSTR Extension, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000F9)]
    HRESULT _stdcall TempString([out, retval] BSTR* Value);
    [propput, id(0x000000F9)]
    HRESULT _stdcall TempString([in] BSTR Value);
    [propget, id(0x000000FA)]
    HRESULT _stdcall Month([out, retval] long* Value);
    [propput, id(0x000000FA)]
    HRESULT _stdcall Month([in] long Value);
    [propget, id(0x000000FB)]
    HRESULT _stdcall Day([out, retval] long* Value);
    [propput, id(0x000000FB)]
    HRESULT _stdcall Day([in] long Value);
    [propget, id(0x000000FC)]
    HRESULT _stdcall OriginalMonth([out, retval] long* Value);
    [propput, id(0x000000FC)]
    HRESULT _stdcall OriginalMonth([in] long Value);
    [propget, id(0x000000FD)]
    HRESULT _stdcall OriginalDay([out, retval] long* Value);
    [propput, id(0x000000FD)]
    HRESULT _stdcall OriginalDay([in] long Value);
    [id(0x000000FE)]
    HRESULT _stdcall CalculateGapDataExt([in] BSTR Extension);
    [id(0x000000FF)]
    HRESULT _stdcall MarkPlayed([in] DATE Date);
    [propget, id(0x00000100)]
    HRESULT _stdcall StartTime([out, retval] long* Value);
    [propput, id(0x00000100)]
    HRESULT _stdcall StartTime([in] long Value);
    [propget, id(0x00000101)]
    HRESULT _stdcall StopTime([out, retval] long* Value);
    [propput, id(0x00000101)]
    HRESULT _stdcall StopTime([in] long Value);
    [propget, id(0x00000102)]
    HRESULT _stdcall SkipCount([out, retval] long* Value);
    [propput, id(0x00000102)]
    HRESULT _stdcall SkipCount([in] long Value);
    [propget, id(0x00000103)]
    HRESULT _stdcall TrackType([out, retval] long* Value);
    [propput, id(0x00000103)]
    HRESULT _stdcall TrackType([in] long Value);
    [propget, id(0x00000105)]
    HRESULT _stdcall Producer([out, retval] BSTR* Value);
    [propput, id(0x00000105)]
    HRESULT _stdcall Producer([in] BSTR Value);
    [propget, id(0x00000104)]
    HRESULT _stdcall Series([out, retval] BSTR* Value);
    [propput, id(0x00000104)]
    HRESULT _stdcall Series([in] BSTR Value);
    [propget, id(0x00000106)]
    HRESULT _stdcall Director([out, retval] BSTR* Value);
    [propput, id(0x00000106)]
    HRESULT _stdcall Director([in] BSTR Value);
    [propget, id(0x00000107)]
    HRESULT _stdcall Actors([out, retval] BSTR* Value);
    [propput, id(0x00000107)]
    HRESULT _stdcall Actors([in] BSTR Value);
    [propget, id(0x00000108)]
    HRESULT _stdcall ParentalRating([out, retval] BSTR* Value);
    [propput, id(0x00000108)]
    HRESULT _stdcall ParentalRating([in] BSTR Value);
    [propget, id(0x00000109)]
    HRESULT _stdcall SeasonNumber([out, retval] BSTR* Value);
    [propput, id(0x00000109)]
    HRESULT _stdcall SeasonNumber([in] BSTR Value);
    [propget, id(0x0000010A)]
    HRESULT _stdcall EpisodeNumber([out, retval] BSTR* Value);
    [propput, id(0x0000010A)]
    HRESULT _stdcall EpisodeNumber([in] BSTR Value);
  };

  [
    uuid(434A75C7-3C1A-45FB-A16F-4C9D2FB736FD),
    version(1.0),
    helpstring("Dispatch interface for SDBSongIterator Object"),
    dual,
    oleautomation
  ]
  interface ISDBSongIterator: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall EOF([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Item([out, retval] ISDBSongData** Value);
    [id(0x00000003)]
    HRESULT _stdcall Next(void);
  };

  [
    uuid(B60187D3-0F24-48B4-B6A7-B0E744C0F882),
    version(1.0),
    helpstring("Dispatch interface for SDBSongList Object"),
    dual,
    oleautomation
  ]
  interface ISDBSongList: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [id(0x00000003)]
    HRESULT _stdcall Add([in]  IDispatch* Song);
    [propget, id(0x00000004)]
    HRESULT _stdcall _Data([out, retval] long* Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Artists([out, retval] ISDBArtists** Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall Albums([out, retval] ISDBAlbums** Value);
    [id(0x000000C9)]
    HRESULT _stdcall UpdateAll(void);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Item([in] long Index, [out, retval] ISDBSongData** Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Item([in] long Index, [in] ISDBSongData* Value);
    [id(0x000000CB)]
    HRESULT _stdcall Delete([in] long Index);
    [id(0x000000CC)]
    HRESULT _stdcall Insert([in] long Index, [in]  IDispatch* Song);
  };

  [
    uuid(45F7BD3F-88F7-449B-92B7-768A3F66C08B),
    version(1.0),
    helpstring("Dispatch interface for SDBScriptControl Object"),
    dual,
    oleautomation
  ]
  interface ISDBScriptControl: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Terminate([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall ScriptPath([out, retval] BSTR* Value);
    [id(0x000000CA)]
    HRESULT _stdcall UnRegisterAllEvents(void);
    [id(0x000000CB)]
    HRESULT _stdcall UnRegisterEvents([in]  IDispatch* ObjectVar);
    [id(0x000000CC)]
    HRESULT _stdcall RegisterEvent([in]  IDispatch* ObjectVar, [in] BSTR EventName, [in] BSTR HandlerName);
    [id(0x000000CD)]
    HRESULT _stdcall Include([in] BSTR ScriptPath);
    [id(0x000000CE)]
    HRESULT _stdcall ShowHangingEvents(void);
    [id(0x000000CF)]
    HRESULT _stdcall UnRegisterHandler([in] BSTR HandlerName);
    [id(0x000000D0)]
    HRESULT _stdcall Reload([in] BSTR ScriptPath);
  };

  [
    uuid(F5AE7210-0621-4B4A-8D76-C264E9375FFF),
    version(1.0),
    helpstring("Interface for SDBDropTarget Object")
  ]
  interface ISDBDropTarget: IUnknown
  {
  };

  [
    uuid(7CC72801-2FA7-4147-AF06-0D3293BE3FE1),
    version(1.0),
    helpstring("Dispatch interface for SDBPlaylist Object"),
    dual,
    oleautomation
  ]
  interface ISDBPlaylist: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Title([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Title([in] BSTR Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall isAutoplaylist([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ChildPlaylists([out, retval] ISDBPlaylists** Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Tracks([out, retval] ISDBSongList** Value);
    [id(0x000000CD)]
    HRESULT _stdcall AddTrack([in] ISDBSongData* Track);
    [id(0x000000CE)]
    HRESULT _stdcall AddTracks([in] ISDBSongList* Tracks);
    [id(0x000000CF)]
    HRESULT _stdcall Delete(void);
    [id(0x000000D0)]
    HRESULT _stdcall Clear(void);
    [id(0x000000D1)]
    HRESULT _stdcall RemoveTrack([in] ISDBSongData* Track);
    [id(0x000000D2)]
    HRESULT _stdcall MoveTrack([in] ISDBSongData* Track, [in] ISDBSongData* BeforeTrack);
    [id(0x000000D3)]
    HRESULT _stdcall CreateChildPlaylist([in] BSTR Title, [out, retval]  IDispatch** Playlist);
    [id(0x000000D4)]
    HRESULT _stdcall AddTrackById([in] long Track);
    [propget, id(0x000000D5)]
    HRESULT _stdcall ID([out, retval] long* Value);
    [id(0x000000D6)]
    HRESULT _stdcall InsertTrack([in] long Index, [in] ISDBSongData* Track);
    [id(0x000000D7)]
    HRESULT _stdcall InsertTracks([in] long Index, [in] ISDBSongList* Tracks);
    [id(0x000000D8)]
    HRESULT _stdcall RemoveTrackNoConfirmation([in] ISDBSongData* Track);
  };

  [
    uuid(5130E62B-276F-4822-851E-D4B3023AB7AB),
    version(1.0),
    helpstring("Dispatch interface for SDBPlaylists Object"),
    dual,
    oleautomation
  ]
  interface ISDBPlaylists: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Item([in] long Index, [out, retval] ISDBPlaylist** Value);
  };

  [
    uuid(F54727BF-04C0-4ECA-8A8D-A44C11797D3E),
    version(1.0),
    helpstring("Dispatch interface for SDBTreeNode Object"),
    dual,
    oleautomation
  ]
  interface ISDBTreeNode: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall IconIndex([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall IconIndex([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall CustomNodeId([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall CustomNodeId([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CustomDataId([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall CustomDataId([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall CustomData([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall CustomData([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall _Self([out, retval] long* Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall Expanded([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall Expanded([in] VARIANT_BOOL Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall UseScript([out, retval] BSTR* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall UseScript([in] BSTR Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall OnFillTracksFunct([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall OnFillTracksFunct([in] BSTR Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall OnFillChildren([out, retval] BSTR* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall OnFillChildren([in] BSTR Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall HasChildren([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall HasChildren([in] VARIANT_BOOL Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall OnEdited([out, retval] BSTR* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall OnEdited([in] BSTR Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall OnDragDrop([out, retval] BSTR* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall OnDragDrop([in] BSTR Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall SortGroup([out, retval] long* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall SortGroup([in] long Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall Visible([in] VARIANT_BOOL Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall SortCriteria([out, retval] long* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall SortCriteria([in] long Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall CustomObject([out, retval]  IUnknown** Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall CustomObject([in]  IUnknown* Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall NodeType([out, retval] long* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall NodeType([in] long Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall Path([out, retval] BSTR* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall Path([in] BSTR Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall RelatedObjectID([out, retval] long* Value);
  };

  [
    uuid(3661304B-4D89-4F19-8287-EF7D84233643),
    version(1.0),
    helpstring("Dispatch interface for SDBTree Object"),
    dual,
    oleautomation
  ]
  interface ISDBTree: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall AddNode([in] ISDBTreeNode* ParentNode, [in] ISDBTreeNode* AddNode, [in] EnumTreeNodePos NodePosition);
    [propget, id(0x000000CA)]
    HRESULT _stdcall CreateNode([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Node_NowPlaying([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Node_Library([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Node_Artist([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Node_Playlists([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall Node_MyComputer([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Node_Web([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall CurrentNode([out, retval] ISDBTreeNode** Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall CurrentNode([in] ISDBTreeNode* Value);
    [id(0x000000D2)]
    HRESULT _stdcall RemoveNode([in] ISDBTreeNode* Node);
    [propget, id(0x000000D3)]
    HRESULT _stdcall Node_Album([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall Node_Location([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall Node_Genre([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall Node_Year([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall Node_Rating([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall Node_Classification([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall Node_FilesToEdit([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall Node_VirtualCD([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall Node_Previews([out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall NextNode([in] ISDBTreeNode* Node, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall PreviousNode([in] ISDBTreeNode* Node, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall NextSiblingNode([in] ISDBTreeNode* Node, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall PreviousSiblingNode([in] ISDBTreeNode* Node, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall FirstChildNode([in] ISDBTreeNode* Node, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall LastChildNode([in] ISDBTreeNode* Node, [out, retval] ISDBTreeNode** Value);
    [id(0x000000E2)]
    HRESULT _stdcall SortChildren([in] ISDBTreeNode* Node);
    [propget, id(0x000000E3)]
    HRESULT _stdcall ParentNode([in] ISDBTreeNode* Node, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall Node_Radio([out, retval] ISDBTreeNode** Value);
    [id(0x000000E5)]
    HRESULT _stdcall Refresh(void);
    [propget, id(0x000000E6)]
    HRESULT _stdcall Node_Library_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall Node_Artist_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall Node_Album_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall Node_Location_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000EA)]
    HRESULT _stdcall Node_Genre_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000EB)]
    HRESULT _stdcall Node_Year_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000EC)]
    HRESULT _stdcall Node_Rating_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000ED)]
    HRESULT _stdcall Node_Classification_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000EE)]
    HRESULT _stdcall Node_FilesToEdit_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000EF)]
    HRESULT _stdcall Node_VirtualCD_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
    [propget, id(0x000000F0)]
    HRESULT _stdcall Node_Previews_InCollection([in] long CollectionID, [out, retval] ISDBTreeNode** Value);
  };

  [
    uuid(523C0A28-CDBD-4882-A581-3D3C2CD5F480),
    version(1.0),
    helpstring("Dispatch interface for SDBTracksWindow Object"),
    dual,
    oleautomation
  ]
  interface ISDBTracksWindow: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall AddTrack([in] ISDBSongData* AddedTrack);
    [id(0x000000CA)]
    HRESULT _stdcall AddTracksFromQuery([in] BSTR AddSQL);
    [id(0x000000CB)]
    HRESULT _stdcall FinishAdding(void);
    [id(0x000000CC)]
    HRESULT _stdcall Refresh(void);
    [propget, id(0x000000CD)]
    HRESULT _stdcall CurrentAddingID([out, retval] long* Value);
    [id(0x000000CE)]
    HRESULT _stdcall AddTrackEx([in] ISDBSongData* AddedTrack, [in] long AddingID, [out, retval] VARIANT_BOOL* Added);
    [id(0x000000CF)]
    HRESULT _stdcall FinishAddingEx([in] long AddingID);
    [id(0x000000D0)]
    HRESULT _stdcall RemoveSelectedTracks(void);
    [id(0x000000D1)]
    HRESULT _stdcall AddTracksFromCustomQuery([in] BSTR SQL);
    [propget, id(0x000000D2)]
    HRESULT _stdcall ViewMode([out, retval] long* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall ViewMode([in] long Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall TrackBrowserVisibled([out, retval] long* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall TrackBrowserVisibled([in] long Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall Selected([in] long Index, [out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall Selected([in] long Index, [in] VARIANT_BOOL Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall Focused([out, retval] long* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall Focused([in] long Value);
  };

  [
    uuid(78A80973-8781-4BDC-A1F4-06131F07AA1E),
    version(1.0),
    helpstring("Dispatch interface for SDBDBIterator Object"),
    dual,
    oleautomation
  ]
  interface ISDBDBIterator: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall EOF([out, retval] VARIANT_BOOL* Value);
    [id(0x000000CA)]
    HRESULT _stdcall Next(void);
    [propget, id(0x000000CB)]
    HRESULT _stdcall StringByIndex([in] long Index, [out, retval] BSTR* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall StringByName([in] BSTR Name, [out, retval] BSTR* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ValueByIndex([in] long Index, [out, retval] VARIANT* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall ValueByName([in] BSTR Name, [out, retval] VARIANT* Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall FieldNames([out, retval] ISDBStringList** Value);
  };

  [
    uuid(D91CA9B4-9849-43AA-BF9C-1C164F5DCC29),
    version(1.0),
    helpstring("Dispatch interface for SDBUIForm Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIForm: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall ShowModal([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall _Self([out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall FormPosition([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall FormPosition([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall SavePositionName([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall SavePositionName([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall BorderStyle([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall BorderStyle([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall StayOnTop([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall StayOnTop([in] VARIANT_BOOL Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall ActiveControl([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall ActiveControl([in] BSTR Value);
  };

  [
    uuid(3A91F4C6-42D4-41A5-9190-EEAC3686D760),
    version(1.0),
    helpstring("Dispatch interface for SDBUI Object"),
    dual,
    oleautomation
  ]
  interface ISDBUI: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall NewForm([out, retval] ISDBUIForm** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall NewButton([in]  IDispatch* Owner, [out, retval] ISDBUIButton** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall NewEdit([in]  IDispatch* Owner, [out, retval] ISDBUIEdit** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall NewPanel([in]  IDispatch* Owner, [out, retval] ISDBUIPanel** Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall NewCheckBox([in]  IDispatch* Owner, [out, retval] ISDBUICheckBox** Value);
    [id(0x000000CC)]
    HRESULT _stdcall AddOptionSheet([in] BSTR SheetLabel, [in] BSTR ScriptFile, [in] BSTR InitProcedure, [in] BSTR SaveProcedure, [in, defaultvalue(0)] long ParentId, [out, retval] long* Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall NewTranspPanel([in]  IDispatch* Owner, [out, retval] ISDBUITranspPanel** Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall NewLabel([in]  IDispatch* Owner, [out, retval] ISDBUILabel** Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall NewActiveX([in]  IDispatch* Owner, [in] BSTR ProgID, [out, retval] ISDBUIActiveX** Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall NewDropDown([in]  IDispatch* Owner, [out, retval] ISDBUIDropDown** Value);
    [id(0x000000D3)]
    HRESULT _stdcall AddMenuItem([in] ISDBMenuItem* ParentItem, [in] long InSection, [in] long ItemOrder, [out, retval] ISDBMenuItem** NewItem);
    [propget, id(0x000000D4)]
    HRESULT _stdcall Menu_File([out, retval] ISDBMenuItem** Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall Menu_Export([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall Menu_Edit([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall Menu_View([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall Menu_Play([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall Menu_Tools([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall Menu_Scripts([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall Menu_Help([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall Menu_TbStandard([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall Menu_TbAdvanced([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall Menu_TbEdit([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall Menu_TbSearch([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall Menu_TbCategorize([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall Menu_TrayIcon([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall Menu_Pop_Tree([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall Menu_Pop_TrackList([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall Menu_Pop_NP([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall Menu_TbNavigation([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall Menu_TbNPMain([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall Menu_TbNPList([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall Menu_TbNPEdit([out, retval] SDBMenuItem** Value);
    [id(0x000000E9)]
    HRESULT _stdcall AddMenuItemSub([in] ISDBMenuItem* ParentItem, [in] long InSection, [in] long ItemOrder, [out, retval] ISDBMenuItem** NewItem);
    [id(0x000000EA)]
    HRESULT _stdcall AddMenuItemSep([in] ISDBMenuItem* ParentItem, [in] long InSection, [in] long ItemOrder, [out, retval] ISDBMenuItem** NewItem);
    [propget, id(0x000000EB)]
    HRESULT _stdcall Menu_Pop_Tree_SendTo([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000ED)]
    HRESULT _stdcall Menu_Pop_TrackList_SendTo([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000EE)]
    HRESULT _stdcall Menu_Pop_TrackList_MoreFrom([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000EF)]
    HRESULT _stdcall Menu_Pop_NP_SendTo([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000F0)]
    HRESULT _stdcall Menu_Pop_NP_MoreFrom([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000EC)]
    HRESULT _stdcall NewRadioButton([in]  IDispatch* Owner, [out, retval] ISDBUIRadioButton** Value);
    [propget, id(0x000000F1)]
    HRESULT _stdcall NewSpinEdit([in]  IDispatch* Owner, [out, retval] SDBUISpinEdit** Value);
    [propget, id(0x000000F2)]
    HRESULT _stdcall NewTrackBar([in]  IDispatch* Owner, [out, retval] SDBUITrackBar** Value);
    [propget, id(0x000000F3)]
    HRESULT _stdcall NewDockablePanel([out, retval] SDBUIDockablePanel** Value);
    [propget, id(0x000000F4)]
    HRESULT _stdcall NewDockablePersistentPanel([in] BSTR PanelName, [out, retval] SDBUIDockablePanel** Value);
    [propget, id(0x000000F5)]
    HRESULT _stdcall Menu_Pop_NP_MainWindow([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000F6)]
    HRESULT _stdcall NewGroupBox([in]  IDispatch* Owner, [out, retval] SDBUIGroupBox** Value);
    [propget, id(0x000000F7)]
    HRESULT _stdcall NewMultiLineEdit([in]  IDispatch* Owner, [out, retval] SDBUIMultiLineEdit** Value);
    [id(0x000000F8)]
    HRESULT _stdcall DeleteOptionSheet([in] long Value);
    [propget, id(0x000000F9)]
    HRESULT _stdcall NewMaskEdit([in]  IDispatch* Owner, [out, retval] SDBUIMaskEdit** Value);
    [propget, id(0x000000FA)]
    HRESULT _stdcall Menu_Pop_NP_MainWindow_SendTo([out, retval] SDBMenuItem** Value);
    [propget, id(0x000000FB)]
    HRESULT _stdcall Menu_Pop_NP_MainWindow_MoreFrom([out, retval] SDBMenuItem** Value);
    [id(0x000000FC)]
    HRESULT _stdcall AddOptionSheetEx([in] BSTR SheetLabel, [in] BSTR ScriptFile, [in] BSTR InitProcedure, [in] BSTR SaveProcedure, [in] BSTR CancelProcedure, [in, defaultvalue(0)] long ParentId, [out, retval] long* Value);
    [propget, id(0x000000FD)]
    HRESULT _stdcall NewListBox([in]  IDispatch* Owner, [out, retval] SDBUIListBox** Value);
    [propget, id(0x000000FE)]
    HRESULT _stdcall NewTreeList([in]  IDispatch* Owner, [out, retval] ISDBUITreeList** Value);
    [id(0x000000FF)]
    HRESULT _stdcall ShowOptions([in] long SheetId);
    [propget, id(0x00000100)]
    HRESULT _stdcall MainWindowFocus([out, retval] long* Value);
    [propput, id(0x00000100)]
    HRESULT _stdcall MainWindowFocus([in] long Value);
    [id(0x00000101)]
    HRESULT _stdcall AddPropertiesSheet([in] BSTR SheetLabel, [in] BSTR ScriptFile, [in] BSTR InitProcedure, [in] BSTR TrackChangeProcedure, [in] BSTR SaveProcedure, [in] long Order, [out, retval] long* Value);
    [id(0x00000102)]
    HRESULT _stdcall DeletePropertiesSheet([in] long Value);
    [id(0x00000103)]
    HRESULT _stdcall ShowPropertiesSheet([in] long Value);
    [id(0x00000104)]
    HRESULT _stdcall HidePropertiesSheet([in] long Value);
    [id(0x00000105)]
    HRESULT _stdcall AddToolbar([in] BSTR Name, [out, retval] SDBMenuItem** Value);
    [propget, id(0x00000106)]
    HRESULT _stdcall GetToolbar([in] BSTR Name, [out, retval] SDBMenuItem** Value);
  };

  [
    uuid(4045E057-ABE5-4A03-8C68-61F51DC21E7C),
    version(1.0),
    helpstring("Dispatch interface for SDBUIButton Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIButton: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall UseScript([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall UseScript([in] BSTR Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall OnClickFunc([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall OnClickFunc([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ModalResult([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall ModalResult([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Default([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Default([in] VARIANT_BOOL Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall Cancel([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall Cancel([in] VARIANT_BOOL Value);
  };

  [
    uuid(3A385CA1-B412-4A12-927A-D77C18374F15),
    version(1.0),
    helpstring("Dispatch interface for SDBUIEdit Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIEdit: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Text([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Text([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall MaxLength([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall MaxLength([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall PasswordChar([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall PasswordChar([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall SelStart([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall SelStart([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall SelLength([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall SelLength([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall SelText([out, retval] BSTR* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall SelText([in] BSTR Value);
  };

  [
    uuid(93F8F352-964B-4B97-8A2B-50AD8FE1AB71),
    version(1.0),
    helpstring("Dispatch interface for SDBUICommon Object"),
    dual,
    oleautomation
  ]
  interface ISDBUICommon: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Left([out, retval] long* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Left([in] long Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Top([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Top([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Width([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Width([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Height([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall Height([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Hint([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Hint([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Anchors([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall Anchors([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall MinWidth([out, retval] long* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall MinWidth([in] long Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall MaxWidth([out, retval] long* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall MaxWidth([in] long Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall MinHeight([out, retval] long* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall MinHeight([in] long Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall MaxHeight([out, retval] long* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall MaxHeight([in] long Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall ClientWidth([out, retval] long* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall ClientWidth([in] long Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall ClientHeight([out, retval] long* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall ClientHeight([in] long Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall Visible([in] VARIANT_BOOL Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall Align([out, retval] long* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall Align([in] long Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall ControlName([out, retval] BSTR* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall ControlName([in] BSTR Value);
    [id(0x000000D9)]
    HRESULT _stdcall SetRect([in] long Left, [in] long Top, [in] long Width, [in] long Height);
    [propget, id(0x000000DA)]
    HRESULT _stdcall Parent([out, retval]  IDispatch** Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall TopParent([out, retval]  IDispatch** Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall ChildControl([in] BSTR ControlName, [out, retval]  IDispatch** Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall CursorType([out, retval] long* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall CursorType([in] long Value);
    [id(0x000000DE)]
    HRESULT _stdcall BringToFront(void);
    [id(0x000000DF)]
    HRESULT _stdcall SendToBack(void);
    [id(0x000000E0)]
    HRESULT _stdcall DestroyControl(void);
    [propget, id(0x000000E1)]
    HRESULT _stdcall FontName([out, retval] BSTR* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall FontName([in] BSTR Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall FontColor([out, retval] long* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall FontColor([in] long Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall FontSize([out, retval] long* Value);
    [propput, id(0x000000E3)]
    HRESULT _stdcall FontSize([in] long Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall FontBold([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall FontBold([in] VARIANT_BOOL Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall FontItalic([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall FontItalic([in] VARIANT_BOOL Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall FontUnderline([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E6)]
    HRESULT _stdcall FontUnderline([in] VARIANT_BOOL Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall FontStrikeOut([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E7)]
    HRESULT _stdcall FontStrikeOut([in] VARIANT_BOOL Value);
    [id(0x000000E8)]
    HRESULT _stdcall SetClientRect([in] long Left, [in] long Top, [in] long Width, [in] long Height);
  };

  [
    uuid(BF282E9B-2FF7-4931-9B6E-DB6C79170298),
    version(1.0),
    helpstring("Dispatch interface for SDBUIPanel Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIPanel: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall _Self([out, retval] long* Value);
  };

  [
    uuid(5F3E510B-8863-4B35-B0B2-73BBE0F8A6BB),
    version(1.0),
    helpstring("Dispatch interface for SDBUICheckBox Object"),
    dual,
    oleautomation
  ]
  interface ISDBUICheckBox: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Checked([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Checked([in] VARIANT_BOOL Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Caption([in] BSTR Value);
  };

  [
    uuid(A3285614-4F7C-45AF-B32E-72403FBFF09A),
    version(1.0),
    helpstring("Dispatch interface for SDBUITranspPanel Object"),
    dual,
    oleautomation
  ]
  interface ISDBUITranspPanel: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall _Self([out, retval] long* Value);
  };

  [
    uuid(0951DCAB-4D42-4BBF-96E7-10B115CDE5F5),
    version(1.0),
    helpstring("Dispatch interface for SDBUILabel Object"),
    dual,
    oleautomation
  ]
  interface ISDBUILabel: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Alignment([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Alignment([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Autosize([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall Autosize([in] VARIANT_BOOL Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Multiline([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Multiline([in] VARIANT_BOOL Value);
  };

  [
    uuid(F91491DF-BEDD-45F7-B7A0-FD8EC422FC3B),
    version(1.0),
    helpstring("Dispatch interface for SDBUIActiveX Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIActiveX: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Interf([out, retval]  IDispatch** Value);
    [id(0x000000CB)]
    HRESULT _stdcall SetHTMLDocument([in] BSTR HTML);
  };

  [
    uuid(28EBD078-0B56-4365-B472-965FC7A5F743),
    version(1.0),
    helpstring("Dispatch interface for SDBRegistry Object"),
    dual,
    oleautomation
  ]
  interface ISDBRegistry: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall OpenKey([in] BSTR Key, [in] VARIANT_BOOL CanCreate, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CA)]
    HRESULT _stdcall CloseKey(void);
    [propget, id(0x000000CB)]
    HRESULT _stdcall StringValue([in] BSTR Name, [out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall StringValue([in] BSTR Name, [in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall KeyExists([in] BSTR Name, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ValueExists([in] BSTR Name, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall IntValue([in] BSTR Name, [out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall IntValue([in] BSTR Name, [in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall BoolValue([in] BSTR Name, [out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall BoolValue([in] BSTR Name, [in] VARIANT_BOOL Value);
    [id(0x000000D0)]
    HRESULT _stdcall DeleteValue([in] BSTR Name, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D1)]
    HRESULT _stdcall DeleteKey([in] BSTR Name, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(B29C73BF-24A3-4861-852B-7DE9CAC3FB66),
    version(1.0),
    helpstring("Dispatch interface for SDBUIDropDown Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIDropDown: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Style([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Style([in] long Value);
    [id(0x000000CB)]
    HRESULT _stdcall AddItem([in] BSTR Text);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ItemIndex([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall ItemIndex([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ItemCount([out, retval] long* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall ItemText([in] long Index, [out, retval] BSTR* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall ItemText([in] long Index, [in] BSTR Value);
    [id(0x000000CF)]
    HRESULT _stdcall DeleteItem([in] long Index);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Text([out, retval] BSTR* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall Text([in] BSTR Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall UseScript([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall UseScript([in] BSTR Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall OnSelectFunc([out, retval] BSTR* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall OnSelectFunc([in] BSTR Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall SelStart([out, retval] long* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall SelStart([in] long Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall SelLength([out, retval] long* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall SelLength([in] long Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall SelText([out, retval] BSTR* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall SelText([in] BSTR Value);
  };

  [
    uuid(A398C8D2-EE57-4BAF-917B-429E031AC64D),
    version(1.0),
    helpstring("Dispatch interface for SDBMenuItem Object"),
    dual,
    oleautomation
  ]
  interface ISDBMenuItem: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall _Self([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall UseScript([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall UseScript([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall OnClickFunc([out, retval] BSTR* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall OnClickFunc([in] BSTR Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ShortCut([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall ShortCut([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall IconIndex([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall IconIndex([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall Hint([out, retval] BSTR* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall Hint([in] BSTR Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall Visible([in] VARIANT_BOOL Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall Checked([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall Checked([in] VARIANT_BOOL Value);
  };

  [
    uuid(28BD64DA-3A23-440F-8265-D5D2808A867F),
    version(1.0),
    helpstring("Dispatch interface for SDBDevice Object"),
    dual,
    oleautomation
  ]
  interface ISDBDevice: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall DeviceStart([in] long LibraryHandle, [in] BSTR DeviceCaption, [in] long DeviceDriveLetter, [out, retval] long* DeviceHandle);
    [id(0x000000CA)]
    HRESULT _stdcall DeviceStop([in] long DeviceHandle);
    [id(0x000000CB)]
    HRESULT _stdcall DeviceStartEx([in] long LibraryHandle, [in] BSTR DeviceID, [in] BSTR DeviceCaption, [in] long DeviceDriveLetter, [out, retval] long* DeviceHandle);
    [id(0x000000CC)]
    HRESULT _stdcall DeviceEject([in] long DevInstHandle, [in] BSTR DeviceName, [out, retval] VARIANT_BOOL* Success);
    [propget, id(0x000000CD)]
    HRESULT _stdcall canEjectDevice([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall ActiveDeviceList([in] BSTR containID, [out, retval] ISDBDeviceList** Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall isPlaylistForSynch([in] long DeviceHandle, [in] long IdPlaylist, [out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall isPlaylistForSynch([in] long DeviceHandle, [in] long IdPlaylist, [in] VARIANT_BOOL Value);
    [id(0x000000D0)]
    HRESULT _stdcall CreateDeviceNode([in] long DeviceHandle, [out, retval] ISDBTreeNode** DeviceNode);
    [id(0x000000D1)]
    HRESULT _stdcall ShowDeviceConfig([in] long DeviceHandle);
    [id(0x000000D2)]
    HRESULT _stdcall DeviceThreadedEject([in] long DeviceHandle);
    [propget, id(0x000000D3)]
    HRESULT _stdcall DeviceIcon([in] long DeviceHandle, [out, retval] long* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall DeviceIcon([in] long DeviceHandle, [in] long Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall DeviceMenuIcon([in] long DeviceHandle, [out, retval] long* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall DeviceMenuIcon([in] long DeviceHandle, [in] long Value);
    [id(0x000000D5)]
    HRESULT _stdcall LockPlugin([in] long HLibrary);
    [id(0x000000D6)]
    HRESULT _stdcall UnlockPlugin([in] long HLibrary);
    [propget, id(0x000000D8)]
    HRESULT _stdcall TotalSpace([in] long DeviceHandle, [out, retval] CURRENCY* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall FreeSpace([in] long DeviceHandle, [out, retval] CURRENCY* Value);
    [id(0x000000DA)]
    HRESULT _stdcall GetTrackSynchStatus([in] long DeviceHandle, [in] BSTR TrackPath, [out, retval] ISDBTrackSynchStatus** SynchStatus);
    [id(0x000000DB)]
    HRESULT _stdcall GetTrackIDSynchStatus([in] long DeviceHandle, [in] long TrackID, [out, retval] ISDBTrackSynchStatus** SynchStatus);
    [propget, id(0x000000DE)]
    HRESULT _stdcall DriveLetterFree([in] long LetterIndex, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall IsVisible([in] long DeviceHandle, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DC)]
    HRESULT _stdcall ChangeDeviceID([in] BSTR PluginName, [in] BSTR OldID, [in] BSTR NewID, [out, retval] VARIANT_BOOL* Success);
    [id(0x000000DD)]
    HRESULT _stdcall RegisterTreeNode([in] long DeviceHandle, [in] ISDBTreeNode* TreeNode);
    [id(0x000000DF)]
    HRESULT _stdcall ChangeDeviceCaption([in] long DeviceHandle, [in] BSTR NewCaption);
    [id(0x000000E0)]
    HRESULT _stdcall StartSynch([in] long DeviceHandle, [in] SDBSongList* TrackList);
    [id(0x000000E1)]
    HRESULT _stdcall AddDeviceNode([in] ISDBTreeNode* DeviceNode);
    [propget, id(0x000000E2)]
    HRESULT _stdcall SynchTerminating([in] long DeviceHandle, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall isDeviceConnected([in] BSTR USBID, [out, retval] long* Value);
    [id(0x000000E4)]
    HRESULT _stdcall isSynchTracksFolder([in] long DeviceHandle, [in] BSTR Folder, [out, retval] VARIANT_BOOL* Success);
    [propget, id(0x000000E5)]
    HRESULT _stdcall ActiveDeviceListEx([in] BSTR containID, [in] long subdriveindex, [out, retval] ISDBDeviceList** Value);
    [id(0x000000E6)]
    HRESULT _stdcall TerminateThreads([in] long DeviceHandle);
  };

  [
    uuid(760CCEB3-0D45-478C-A51F-9548EA54BBF5),
    version(1.0),
    helpstring("Dispatch interface for SDBUIRadioButton Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIRadioButton: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Checked([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Checked([in] VARIANT_BOOL Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Caption([in] BSTR Value);
  };

  [
    uuid(C13DD8DA-DDFB-48AA-B2A2-8699548496F9),
    version(1.0),
    helpstring("Dispatch interface for SDBDeviceList Object"),
    dual,
    oleautomation
  ]
  interface ISDBDeviceList: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall DriveLetterIndex([in] long Index, [out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall DeviceID([in] long Index, [out, retval] BSTR* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall FriendlyName([in] long Index, [out, retval] BSTR* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall DeviceInst([in] long Index, [out, retval] long* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall AllDeviceIDs([in] long Index, [out, retval] BSTR* Value);
  };

  [
    uuid(C53F4C0C-C663-4AF3-9DAA-C844208BB254),
    version(1.0),
    helpstring("Dispatch interface for SDBTools Object"),
    dual,
    oleautomation
  ]
  interface ISDBTools: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall DeleteTracks([in] ISDBSongList* TrackList, [in] VARIANT_BOOL Confirmation, [in] EnumYesNo ToRecycleBin, [out, retval] EnumYesNo* Deleted);
    [propget, id(0x000000CA)]
    HRESULT _stdcall FileSystem([out, retval] ISDBFileSystem** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MainThreadCallFunc([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ArtistByName([in] BSTR ArtistName, [out, retval] SDBArtist** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall AlbumByName([in] BSTR ArtistName, [in] BSTR AlbumName, [out, retval] SDBAlbum** Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall ArtistCompFunc([out, retval] long* Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall IniFileByPath([in] BSTR Path, [out, retval] SDBIniFile** Value);
    [id(0x000000D0)]
    HRESULT _stdcall Mask2UFText([in] BSTR Mask, [out, retval] BSTR* OutText);
    [id(0x000000D1)]
    HRESULT _stdcall UFText2Mask([in] BSTR InText, [out, retval] BSTR* OutMask);
    [propget, id(0x000000D2)]
    HRESULT _stdcall WebSearch([out, retval] ISDBWebSearch** Value);
    [id(0x000000D3)]
    HRESULT _stdcall Sleep([in] long Value);
    [id(0x000000D4)]
    HRESULT _stdcall OutputDebugString([in] BSTR Value);
    [id(0x000000D5)]
    HRESULT _stdcall OutputDebugStringMM([in] BSTR Value);
    [id(0x000000D6)]
    HRESULT _stdcall StringForSorting([in] BSTR Str, [out, retval] BSTR* Value);
    [id(0x000000D7)]
    HRESULT _stdcall MultiString2UFText([in] BSTR MultiString, [out, retval] BSTR* UFText);
    [id(0x000000D8)]
    HRESULT _stdcall UFText2MultiString([in] BSTR UFText, [out, retval] BSTR* MultiString);
    [id(0x000000D9)]
    HRESULT _stdcall LoadImage([in] BSTR Filename, [out, retval] SDBImage** Image);
    [id(0x000000DA)]
    HRESULT _stdcall RemapASCII([in] BSTR Str, [out, retval] BSTR* Value);
  };

  [
    uuid(CE2A0CA1-9007-4E37-8242-BFBCBD9D57C8),
    version(1.0),
    helpstring("Dispatch interface for SDBUISpinEdit Object"),
    dual,
    oleautomation
  ]
  interface ISDBUISpinEdit: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Value([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Value([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MinValue([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall MinValue([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall MaxValue([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall MaxValue([in] long Value);
  };

  [
    uuid(6E4B8882-734B-4997-87E9-A10C34C18C98),
    version(1.0),
    helpstring("Dispatch interface for SDBFileSystem Object"),
    dual,
    oleautomation
  ]
  interface ISDBFileSystem: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall DeleteFile([in] BSTR Filename);
    [id(0x000000CA)]
    HRESULT _stdcall CreateTextFile([in] BSTR Filename, [in, optional, defaultvalue(FALSE)] VARIANT_BOOL Overwrite, [out, retval] ISDBTextFile** Result);
    [id(0x000000CB)]
    HRESULT _stdcall FileExists([in] BSTR Filename, [out, retval] VARIANT_BOOL* Result);
    [id(0x000000CC)]
    HRESULT _stdcall CorrectFilename([in] BSTR Filename, [out, retval] BSTR* Result);
    [id(0x000000CD)]
    HRESULT _stdcall CreateFolder([in] BSTR Folder, [out, retval] VARIANT_BOOL* Result);
    [id(0x000000CE)]
    HRESULT _stdcall MoveFile([in] BSTR Source, [in] BSTR Destination, [out, retval] VARIANT_BOOL* Result);
    [id(0x000000CF)]
    HRESULT _stdcall CopyFile([in] BSTR Source, [in] BSTR Destination, [out, retval] VARIANT_BOOL* Result);
    [id(0x000000D0)]
    HRESULT _stdcall GetShortPath([in] BSTR FileName, [out, retval] BSTR* Result);
  };

  [
    uuid(0AB5A8A3-9D65-44F8-8055-D1D7E89B35DC),
    version(1.0),
    helpstring("Dispatch interface for SDBTextFile Object"),
    dual,
    oleautomation
  ]
  interface ISDBTextFile: IDispatch
  {
    [id(0x000000CA)]
    HRESULT _stdcall WriteLine([in, optional, defaultvalue("")] BSTR aText);
    [id(0x000000C9)]
    HRESULT _stdcall Close(void);
    [id(0x000000CB)]
    HRESULT _stdcall Write([in] BSTR aText);
    [id(0x000000CC)]
    HRESULT _stdcall WriteData([in] long DataPointer, [in] long DataLength);
  };

  [
    uuid(FB35B81B-7C46-4EEE-850C-51182B364FA4),
    version(1.0),
    helpstring("Dispatch interface for SDBTrackSynchStatus Object"),
    dual,
    oleautomation
  ]
  interface ISDBTrackSynchStatus: IDispatch
  {
    [propget, id(0x000000CB)]
    HRESULT _stdcall Track([out, retval] ISDBSongData** Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall DeviceTrackPath([out, retval] BSTR* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Rating([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Rating([in] long Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall PlayCount([out, retval] long* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall PlayCount([in] long Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall DateUploaded([out, retval] DATE* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall DateUploaded([in] DATE Value);
  };

  [
    uuid(0F33B5E0-3B76-4DC1-966E-593B5FD3342E),
    version(1.0),
    helpstring("Dispatch interface for SDBAlbumArtList Object"),
    dual,
    oleautomation
  ]
  interface ISDBAlbumArtList: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Item([in] long Index, [out, retval] ISDBAlbumArtItem** Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Item([in] long Index, [in] ISDBAlbumArtItem* Value);
    [id(0x000000CB)]
    HRESULT _stdcall Delete([in] long Index);
    [id(0x000000CC)]
    HRESULT _stdcall UpdateDB(void);
    [propget, id(0x000000CE)]
    HRESULT _stdcall AddNew([out, retval] ISDBAlbumArtItem** Value);
  };

  [
    uuid(96F21D5C-F190-4B87-A8C1-C45179197BDB),
    version(1.0),
    helpstring("Dispatch interface for SDBAlbumArtItem Object"),
    dual,
    oleautomation
  ]
  interface ISDBAlbumArtItem: IDispatch
  {
    [propget, id(0x000000CB)]
    HRESULT _stdcall Image([out, retval] ISDBImage** Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall _Self([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall PicturePath([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall PicturePath([in] BSTR Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall RelativePicturePath([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall RelativePicturePath([in] BSTR Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ItemType([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall ItemType([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall ItemStorage([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall ItemStorage([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall Description([in] BSTR Value);
  };

  [
    uuid(0DEDF6F9-DABB-430B-A4C1-B6F8BEC5A2D1),
    version(1.0),
    helpstring("Dispatch interface for SDBImage Object"),
    dual,
    oleautomation
  ]
  interface ISDBImage: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Width([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Height([out, retval] long* Value);
    [id(0x000000CB)]
    HRESULT _stdcall ConvertFormat([in] long NewWidth, [in] long NewHeight, [in] BSTR NewFormat, [in] long Compression, [in] long BackgroundColor, [out, retval] ISDBImage** NewImage);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ImageData([out, retval] long* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ImageDataLen([out, retval] long* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall ImageFormat([out, retval] BSTR* Value);
    [id(0x000000CF)]
    HRESULT _stdcall CopyPart([in] long X, [in] long Y, [in] long w, [in] long h, [in] long BackgroundColor, [out, retval] ISDBImage** NewImage);
    [id(0x000000D0)]
    HRESULT _stdcall ConvertFormatEx([in] long NewWidth, [in] long NewHeight, [in] BSTR NewFormat, [in] long Compression, [in] long BackgroundColor, [in] long Flags, [out, retval] ISDBImage** NewImage);
  };

  [
    uuid(954E2D22-B192-4354-BF17-BD21A7F7ECEF),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISDBHWEvents: IUnknown
  {
  };

  [
    uuid(A53D58E0-1398-422E-8824-D01CC468E206),
    version(1.0),
    helpstring("Dispatch interface for SDBUITrackBar Object"),
    dual,
    oleautomation
  ]
  interface ISDBUITrackBar: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] SDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall MinValue([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall MinValue([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MaxValue([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall MaxValue([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Value([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall Value([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Horizontal([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Horizontal([in] VARIANT_BOOL Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Frequency([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall Frequency([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall PageSize([out, retval] long* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall PageSize([in] long Value);
  };

  [
    uuid(0470120E-FC98-42B0-8B4A-15DB8D8F5753),
    version(1.0),
    helpstring("Dispatch interface for SDBUIDockablePanel Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIDockablePanel: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall _Self([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Common([out, retval] SDBUICommon** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall DockedTo([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall DockedTo([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Persistent([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Persistent([in] VARIANT_BOOL Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall IsNew([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall ShowCaption([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall ShowCaption([in] VARIANT_BOOL Value);
  };

  [
    uuid(C5945B0E-000E-4073-B8DD-FB7E31DB3649),
    version(1.0),
    helpstring("Dispatch interface for SDBTimer Object"),
    dual,
    oleautomation
  ]
  interface ISDBTimer: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Interval([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Interval([in] long Value);
  };

  [
    uuid(C8F110E2-DF88-4F2A-8FF0-51FDF9F883AA),
    version(1.0),
    helpstring("Dispatch interface for SDBStringList Object"),
    dual,
    oleautomation
  ]
  interface ISDBStringList: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Item([in] long Index, [out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Item([in] long Index, [in] BSTR Value);
    [id(0x000000CB)]
    HRESULT _stdcall Add([in] BSTR Value);
    [id(0x000000CC)]
    HRESULT _stdcall Delete([in] long Index);
    [id(0x000000CD)]
    HRESULT _stdcall Sort(void);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Copy([out, retval] SDBStringList** Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall _Self([out, retval] long* Value);
  };

  [
    uuid(CD78FB7F-CBEB-4301-B97E-BE4466A05FED),
    version(1.0),
    helpstring("Dispatch interface for SDBWebSearch Object"),
    dual,
    oleautomation
  ]
  interface ISDBWebSearch: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall SetSearchResults([in] ISDBStringList* Results);
    [id(0x000000CA)]
    HRESULT _stdcall SmartUpdateTracks([in] ISDBStringList* Tracks);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ResultIndex([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall ResultIndex([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall NewTracks([out, retval] SDBSongList** Value);
    [id(0x000000CD)]
    HRESULT _stdcall RefreshViews(void);
    [id(0x000000CE)]
    HRESULT _stdcall ClearTracksData(void);
    [propget, id(0x000000CF)]
    HRESULT _stdcall TrackChecked([in] long Index, [out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall TrackChecked([in] long Index, [in] VARIANT_BOOL Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall AlbumArtURL([out, retval] BSTR* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall AlbumArtURL([in] BSTR Value);
  };

  [
    uuid(C58AAEC0-E46F-49F1-AFC3-023AAB74F6AD),
    version(1.0),
    helpstring("Dispatch interface for SDBUIGroupBox Object."),
    dual,
    oleautomation
  ]
  interface ISDBUIGroupBox: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] SDBUICommon** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall _Self([out, retval] long* Value);
  };

  [
    uuid(C6285BB6-8029-4962-BC8A-BB67C8F989A1),
    version(1.0),
    helpstring("Dispatch interface for SDBUIMultiLineEdit Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIMultiLineEdit: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Text([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Text([in] BSTR Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Lines([out, retval] ISDBStringList** Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Lines([in] ISDBStringList* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Common([out, retval] SDBUICommon** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall SelStart([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall SelStart([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall SelLength([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall SelLength([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall SelText([out, retval] BSTR* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall SelText([in] BSTR Value);
  };

  [
    uuid(012A5DF3-BB17-4ACD-9DFF-FCD7D8AA8338),
    version(1.0),
    helpstring("Dispatch interface for SDBUIMaskEdit Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIMaskEdit: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [id(0x000000CB)]
    HRESULT _stdcall AddMask([in] BSTR Text);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ItemIndex([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall ItemIndex([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ItemCount([out, retval] long* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall ItemText([in] long Index, [out, retval] BSTR* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall ItemText([in] long Index, [in] BSTR Value);
    [id(0x000000CF)]
    HRESULT _stdcall DeleteMask([in] long Index);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Text([out, retval] BSTR* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall Text([in] BSTR Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall PathPart([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall PathPart([in] BSTR Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall MaskPart([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall MaskPart([in] BSTR Value);
    [id(0x000000D2)]
    HRESULT _stdcall AddMaskHelp([in] BSTR Value);
    [id(0x000000D3)]
    HRESULT _stdcall ClearMaskHelp(void);
    [propget, id(0x000000D5)]
    HRESULT _stdcall WizardEnabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall WizardEnabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall BrowseEnabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall BrowseEnabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall BrowseTitle([out, retval] BSTR* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall BrowseTitle([in] BSTR Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall VirtualDir([out, retval] BSTR* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall VirtualDir([in] BSTR Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall CanDefineDirs([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall CanDefineDirs([in] VARIANT_BOOL Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall SampleSongObject([in] ISDBSongData* Param1);
    [propget, id(0x000000DA)]
    HRESULT _stdcall RootDir([out, retval] BSTR* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall RootDir([in] BSTR Value);
    [id(0x000000DB)]
    HRESULT _stdcall MaskHelpPreset([in] long ID);
  };

  [
    uuid(0D3F5B2C-59EF-479E-A7EC-1C07B23E81F1),
    version(1.0),
    helpstring("Dispatch interface for SDBUIListBox Object"),
    dual,
    oleautomation
  ]
  interface ISDBUIListBox: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Items([out, retval] SDBStringList** Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Items([in] SDBStringList* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ItemIndex([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall ItemIndex([in] long Value);
  };

  [
    uuid(DE7D4489-2657-45CD-919C-AF5889E3228B),
    version(1.0),
    helpstring("Dispatch interface for SDBTreeList Object"),
    dual,
    oleautomation
  ]
  interface ISDBUITreeList: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Common([out, retval] ISDBUICommon** Value);
    [id(0x000000CA)]
    HRESULT _stdcall AddNode([in] ISDBUITreeListItem* Parent, [out, retval] ISDBUITreeListItem** Result);
    [propget, id(0x000000CB)]
    HRESULT _stdcall FocusedNode([out, retval] ISDBUITreeListItem** Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall FocusedNode([in] ISDBUITreeListItem* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall FocusedColumn([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall FocusedColumn([in] long Value);
    [id(0x000000CD)]
    HRESULT _stdcall Refresh(void);
    [id(0x000000CE)]
    HRESULT _stdcall DeleteNode([in] ISDBUITreeListItem* Node);
    [propget, id(0x000000CF)]
    HRESULT _stdcall HeaderVisible([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall HeaderVisible([in] VARIANT_BOOL Value);
    [id(0x000000D0)]
    HRESULT _stdcall HeaderAddColumn([in] BSTR Caption);
    [propget, id(0x000000D1)]
    HRESULT _stdcall RootNodeCount([out, retval] long* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall RootNodeCount([in] long Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall HeaderColumnWidth([in] long Index, [out, retval] long* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall HeaderColumnWidth([in] long Index, [in] long Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall FirstNode([out, retval] SDBUITreeListItem** Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall Indent([out, retval] long* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall Indent([in] long Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall ShowTreeLines([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall ShowTreeLines([in] VARIANT_BOOL Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall ExtendedFocus([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall ExtendedFocus([in] VARIANT_BOOL Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall FullRowSelect([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall FullRowSelect([in] VARIANT_BOOL Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall MultiSelect([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall MultiSelect([in] VARIANT_BOOL Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall ShowRoot([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall ShowRoot([in] VARIANT_BOOL Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall GridExtensions([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall GridExtensions([in] VARIANT_BOOL Value);
  };

  [
    uuid(DB803475-46DA-4605-906C-B2A2484B7FF7),
    version(1.0),
    helpstring("Dispatch interface for SDBUITreeListItem Object"),
    dual,
    oleautomation
  ]
  interface ISDBUITreeListItem: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall _Self([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Expanded([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Expanded([in] VARIANT_BOOL Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall HasChildren([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall HasChildren([in] VARIANT_BOOL Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall TreeList([out, retval] SDBUITreeList** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Index([out, retval] long* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall UserText([out, retval] BSTR* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall UserText([in] BSTR Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall UserData([out, retval]  IDispatch** Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall UserData([in]  IDispatch* Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall CheckType([out, retval] long* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall CheckType([in] long Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall CheckState([out, retval] long* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall CheckState([in] long Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall NextNode([out, retval] SDBUITreeListItem** Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall NextSibling([out, retval] SDBUITreeListItem** Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall FirstChild([out, retval] SDBUITreeListItem** Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall Selected([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall Selected([in] VARIANT_BOOL Value);
  };

  [
    uuid(41FCE288-1F84-4770-B94F-7A3AD222DE03),
    version(1.0),
    helpstring("Dispatch interface for SDBDownloader Object"),
    dual,
    oleautomation
  ]
  interface ISDBDownloader: IDispatch
  {
    [id(0x000000CA)]
    HRESULT _stdcall DownloadFile([in] BSTR URL, [in] BSTR Filename, [in] VARIANT_BOOL AddToLibrary);
    [id(0x000000CB)]
    HRESULT _stdcall GetURLContent([in] BSTR URL, [out, retval] BSTR* Content);
    [id(0x000000CC)]
    HRESULT _stdcall GetDownloadProgress([in] BSTR URL, [in] VARIANT_BOOL UsePercent, [out, retval] long* value);
    [id(0x000000CD)]
    HRESULT _stdcall PauseDownload([in] BSTR URL);
    [id(0x000000CE)]
    HRESULT _stdcall ResumeDownload([in] BSTR URL);
    [id(0x000000CF)]
    HRESULT _stdcall CancelDownload([in] BSTR URL);
    [id(0x000000D0)]
    HRESULT _stdcall GetURLContentLength([in] BSTR URL, [out, retval] long* Length);
  };

  [
    uuid(3E70B8B9-EE27-4A09-821A-DD34524E6FFC),
    dual,
    oleautomation
  ]
  interface ISDBCollection: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Comment([out, retval] BSTR* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Visible([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ID([out, retval] long* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Position([out, retval] long* Value);
  };

  [
    uuid(961E91D9-7CEA-40ED-B3A7-DC15D671A282),
    dual,
    oleautomation
  ]
  interface ISDBCollections: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Item([in] long Index, [out, retval] ISDBCollection** Value);
  };

  [
    uuid(ABF1895B-1032-45E1-A119-8926831F7167),
    version(1.0)
  ]
  dispinterface ISDBApplicationEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnTrackProperties([in] ISDBSongList* TrackList);
    [id(0x000000CA)]
    HRESULT OnShutdown(void);
    [id(0x000000CB)]
    HRESULT OnPlay(void);
    [id(0x000000CC)]
    HRESULT OnPause(void);
    [id(0x000000CD)]
    HRESULT OnStop(void);
    [id(0x000000CE)]
    HRESULT OnChangedSelection(void);
    [id(0x000000CF)]
    HRESULT OnBeforeTracksMove([in] ISDBSongList* Tracks, [in] ISDBStringList* NewPaths, [in] VARIANT_BOOL IsMove);
    [id(0x000000D0)]
    HRESULT OnTrackConverted([in] ISDBSongData* SourceTrack, [in] ISDBSongData* TargetTrack);
    [id(0x000000D1)]
    HRESULT OnTrackAdded([in] ISDBSongData* NewTrack);
    [id(0x000000D2)]
    HRESULT OnSeek(void);
    [id(0x000000D3)]
    HRESULT OnTrackDeleting([in] ISDBSongData* Track, [in] VARIANT_BOOL FromDisk, [out, retval] VARIANT_BOOL* CancelDelete);
    [id(0x000000D4)]
    HRESULT OnIdle(void);
    [id(0x000000D5)]
    HRESULT OnTrackListSelectionChanged(void);
    [id(0x000000D6)]
    HRESULT OnNowPlayingSelectionChanged(void);
    [id(0x000000D7)]
    HRESULT OnShuffleClicked(void);
    [id(0x000000D8)]
    HRESULT OnRepeatClicked(void);
    [id(0x000000D9)]
    HRESULT OnNowPlayingModified(void);
    [id(0x000000DA)]
    HRESULT OnTrackEnd(void);
    [id(0x000000DB)]
    HRESULT OnOptionsChange(void);
    [id(0x000000DC)]
    HRESULT OnFilterChange(void);
    [id(0x000000DD)]
    HRESULT OnTrackListFilling(void);
    [id(0x000000DE)]
    HRESULT OnTrackListFilled(void);
    [id(0x000000DF)]
    HRESULT OnPlaybackEnd(void);
    [id(0x000000E0)]
    HRESULT OnTrackSkipped([in] ISDBSongData* Track);
    [id(0x000000E1)]
    HRESULT OnDownloadFinished([in] BSTR URL, [in] VARIANT_BOOL Success, [in] long ResponseCode);
    [id(0x000000E2)]
    HRESULT OnTrackListModified(void);
    [id(0x000000E3)]
    HRESULT OnCompletePlaybackEnd(void);
  };

  [
    uuid(4114837B-1B8C-43E9-9185-A3BC7BA40742),
    version(1.0)
  ]
  dispinterface ISDBTreeNodeEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnFillChildren([in] ISDBTreeNode* Node);
    [id(0x000000CA)]
    HRESULT OnFillTracks([in] ISDBTreeNode* Node);
    [id(0x000000CB)]
    HRESULT OnShowMenuItem([in] long ItemIndex, [out, retval] VARIANT_BOOL* ShowIt);
    [id(0x000000CC)]
    HRESULT OnExecMenuItem([in] long ItemIndex, [out, retval] VARIANT_BOOL* Executed);
    [id(0x000000CD)]
    HRESULT OnShowTrackMenuItem([in] long ItemIndex, [out, retval] VARIANT_BOOL* ShowIt);
    [id(0x000000CE)]
    HRESULT OnExecTrackMenuItem([in] long ItemIndex, [out, retval] VARIANT_BOOL* Executed);
    [id(0x000000CF)]
    HRESULT OnGetFreeSpace([out, retval] CURRENCY* Value);
    [id(0x000000D0)]
    HRESULT OnCanEditNode([in] ISDBTreeNode* Node, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D1)]
    HRESULT OnNodeEdited([in] ISDBTreeNode* Node, [in] BSTR NewText);
    [id(0x000000D2)]
    HRESULT OnNodeEditText([in] ISDBTreeNode* Node, [out, retval] BSTR* NodeCaption);
    [id(0x000000D3)]
    HRESULT OnNodeDragDrop([in] ISDBTreeNode* DestinationNode, [in] ISDBTreeNode* SourceNode, [in] ISDBSongList* TrackList, [in] long CopyType, [in] VARIANT_BOOL JustTest, [out, retval] long* Result);
    [id(0x000000D4)]
    HRESULT OnNodeFocused([in] SDBTreeNode* Node, [out, retval] long* Action);
  };

  [
    uuid(A3697E42-803E-43AD-A195-6DA916427674),
    version(1.0),
    helpstring("Events interface for SDBUIForm Object")
  ]
  dispinterface ISDBUIFormEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnClose([in]  IDispatch* Control);
  };

  [
    uuid(CB4BFF25-1F10-495B-812A-AE78FDC0A163),
    version(1.0),
    helpstring("Events interface for SDBUIButton Object")
  ]
  dispinterface ISDBUIButtonEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnClick(void);
  };

  [
    uuid(2AD694A2-A098-4CF6-A42B-0BA22BDC1742),
    version(1.0),
    helpstring("Events interface for SDBUIEdit Object")
  ]
  dispinterface ISDBUIEditEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnChange([in]  IDispatch* Control);
    [id(0x000000CA)]
    HRESULT OnKeyUp([in]  IDispatch* Control, [in] long Key, [in] long Shift);
  };

  [
    uuid(7AD7058D-2641-4DDC-8436-BEAA81A293FE),
    version(1.0)
  ]
  dispinterface ISDBUICommonEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnResize([in]  IDispatch* Control);
    [id(0x000000CA)]
    HRESULT OnClick([in]  IDispatch* Control);
    [id(0x000000CB)]
    HRESULT OnDblClick([in]  IDispatch* Control);
    [id(0x000000CC)]
    HRESULT OnEnter([in]  IDispatch* Control);
    [id(0x000000CD)]
    HRESULT OnExit([in]  IDispatch* Control);
    [id(0x000000CE)]
    HRESULT OnMouseDown([in] long Button, [in] long ShiftState, [in] long X, [in] long Y);
    [id(0x000000CF)]
    HRESULT OnMouseMove([in] long ShiftState, [in] long X, [in] long Y);
    [id(0x000000D0)]
    HRESULT OnMouseUp([in] long Button, [in] long ShiftState, [in] long X, [in] long Y);
    [id(0x000000D1)]
    HRESULT OnKeyDown([in] long Key, [in] long ShiftState);
    [id(0x000000D2)]
    HRESULT OnKeyUp([in] long Key, [in] long ShiftState);
    [id(0x000000D3)]
    HRESULT OnKeyPress([in] BSTR Key);
  };

  [
    uuid(7B77283E-8D67-4345-8DD4-52A85FBCA77D),
    version(1.0),
    helpstring("Events interface for SDBUIPanel Object")
  ]
  dispinterface ISDBUIPanelEvents
  {
    properties:
    methods:
  };

  [
    uuid(77542E92-A4C7-4E9D-BAC6-27BFEDFF5066),
    version(1.0),
    helpstring("Events interface for SDBUICheckBox Object")
  ]
  dispinterface ISDBUICheckBoxEvents
  {
    properties:
    methods:
  };

  [
    uuid(A1B9F539-6A04-418F-97F2-BECEBAAC9B82),
    version(1.0),
    helpstring("Events interface for SDBUITranspPanel Object")
  ]
  dispinterface ISDBUITranspPanelEvents
  {
    properties:
    methods:
  };

  [
    uuid(2021D0EE-743F-48C2-9A71-2274D919A4B0),
    version(1.0),
    helpstring("Events interface for SDBUILabel Object")
  ]
  dispinterface ISDBUILabelEvents
  {
    properties:
    methods:
  };

  [
    uuid(F0FAD6A4-58E1-4A77-B9D7-38BEBB7E94DB),
    version(1.0),
    helpstring("Events interface for SDBUIActiveX Object")
  ]
  dispinterface ISDBUIActiveXEvents
  {
    properties:
    methods:
  };

  [
    uuid(5D05EB93-3C97-4D3E-9567-449F08603E9F),
    version(1.0),
    helpstring("Events interface for SDBUIDropDown Object")
  ]
  dispinterface ISDBUIDropDownEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnSelect([in]  IDispatch* Control);
    [id(0x000000CA)]
    HRESULT OnChange([in]  IDispatch* Control);
  };

  [
    uuid(DDFEBCDA-7991-47F0-B3FF-6EAADACD05E2),
    version(1.0),
    helpstring("Events interface for SDBMenuItem Object")
  ]
  dispinterface ISDBMenuItemEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnClick([in]  IDispatch* Control);
  };

  [
    uuid(DFD15D10-15CB-4F67-A53B-2F566354A93B),
    version(1.0),
    helpstring("Events interface for SDBUIRadioButton Object")
  ]
  dispinterface ISDBUIRadioButtonEvents
  {
    properties:
    methods:
  };

  [
    uuid(FAE608F3-9CC5-4A5A-9C9F-5E4C8B63A64E),
    version(1.0),
    helpstring("Events interface for SDBUISpinEdit Object")
  ]
  dispinterface ISDBUISpinEditEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnChange([in]  IDispatch* Control);
  };

  [
    uuid(9E1F7ECF-4BFB-4586-A19D-62D1D54D9F8A),
    version(1.0),
    helpstring("Events interface for SDBUITrackBar Object")
  ]
  dispinterface ISDBUITrackBarEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnChange([in]  IDispatch* Control);
  };

  [
    uuid(467E8FA3-AA2C-4828-A8B9-5AFE6C351E22),
    version(1.0),
    helpstring("Events interface for SDBUIDockablePanel Object")
  ]
  dispinterface ISDBUIDockablePanelEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnClose([in]  IDispatch* Control);
    [id(0x000000CA)]
    HRESULT OnDockChanged([in]  IDispatch* Control);
  };

  [
    uuid(17FD07A3-88C7-4604-AAAA-49A3565662BB),
    version(1.0),
    helpstring("Events interface for SDBTimer Object")
  ]
  dispinterface ISDBTimerEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnTimer([in] ISDBTimer* Timer);
  };

  [
    uuid(DC3B33DB-6EB4-4572-B78D-F3A7DE19DA13),
    version(1.0),
    helpstring("Events interface for SDBUIGroupBox Object.")
  ]
  dispinterface ISDBUIGroupBoxEvents
  {
    properties:
    methods:
  };

  [
    uuid(7F27FAD1-BCD3-49E6-A77F-4B8060FCBF7F),
    version(1.0),
    helpstring("Events interface for SDBUIMultiLineEdit Object")
  ]
  dispinterface ISDBUIMultiLineEditEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnChange([in]  IDispatch* Control);
  };

  [
    uuid(4A618A57-C77D-409C-AD6E-17C7CD75356D),
    version(1.0),
    helpstring("Events interface for SDBUIMaskEdit Object")
  ]
  dispinterface ISDBUIMaskEditEvents
  {
    properties:
    methods:
    [id(0x000000CA)]
    HRESULT OnChange([in]  IDispatch* Control);
  };

  [
    uuid(ADA91410-DEEA-4F89-A32E-768D243712A7),
    version(1.0),
    helpstring("Events interface for SDBUIListBox Object")
  ]
  dispinterface ISDBUIListBoxEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnChange([in]  IDispatch* Control);
  };

  [
    uuid(EC60F9A9-C28B-4C1B-AACF-FBF76576E88F),
    version(1.0),
    helpstring("Events interface for SDBTreeList Object")
  ]
  dispinterface ISDBUITreeListEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    HRESULT OnGetText([in] ISDBUITreeListItem* Node, [in] long Column, [out, retval] BSTR* Text);
    [id(0x000000CA)]
    HRESULT OnFocusChanged([in] ISDBUITreeListItem* Node, [in] long Column);
    [id(0x000000CB)]
    HRESULT OnExpanding([in] ISDBUITreeListItem* Node);
    [id(0x000000CC)]
    HRESULT OnChecked([in] ISDBUITreeListItem* Node);
  };

  [
    uuid(6AD02240-8A94-4D3A-9BD0-0A0C346F92B5),
    version(1.0),
    helpstring("Events interface for SDBUITreeListItem Object")
  ]
  dispinterface ISDBUITreeListItemEvents
  {
    properties:
    methods:
  };

  [
    uuid(DE84FCEF-2C39-4379-AAF9-6C4A24F546F7),
    version(1.0),
    helpstring("SDBAlbum Object")
  ]
  coclass SDBAlbum
  {
    [default] interface ISDBAlbum;
  };

  [
    uuid(5191CAFF-A745-4FE5-A192-767CF809823D),
    version(1.0),
    helpstring("SDBAlbums Object")
  ]
  coclass SDBAlbums
  {
    [default] interface ISDBAlbums;
  };

  [
    uuid(678D2B8C-D4FA-4087-97E2-9E6CAA10322F),
    version(1.0),
    helpstring("SDBArtist Object")
  ]
  coclass SDBArtist
  {
    [default] interface ISDBArtist;
  };

  [
    uuid(D3823CB6-635D-40B9-8744-E6621A13815A),
    version(1.0),
    helpstring("SDBArtists Object")
  ]
  coclass SDBArtists
  {
    [default] interface ISDBArtists;
  };

  [
    uuid(BEB50AAC-4796-44DC-ABCE-A017CC85489E),
    version(1.0),
    helpstring("SDBCommonDialog Object")
  ]
  coclass SDBCommonDialog
  {
    [default] interface ISDBCommonDialog;
  };

  [
    uuid(5997EFC2-503C-4D8A-89F4-DD17393F07A6),
    version(1.0),
    helpstring("SDBDatabase Object")
  ]
  coclass SDBDatabase
  {
    [default] interface ISDBDatabase;
  };

  [
    uuid(3981ED1A-D706-4A7F-9A58-3A8EAB9BCA33),
    version(1.0),
    helpstring("SDBIniFile Object")
  ]
  coclass SDBIniFile
  {
    [default] interface ISDBIniFile;
  };

  [
    uuid(25FBF537-7850-48E4-90A0-8519EBA1A053),
    version(1.0),
    helpstring("SDBMedia Object")
  ]
  coclass SDBMedia
  {
    [default] interface ISDBMedia;
  };

  [
    uuid(9DD8C561-427F-4DAB-B388-1C0837DB0FBD),
    version(1.0),
    helpstring("SDBPlayer Object")
  ]
  coclass SDBPlayer
  {
    [default] interface ISDBPlayer;
  };

  [
    uuid(FC025122-8B9D-4C8A-BB21-5305526BD3F6),
    version(1.0),
    helpstring("SDBProgress Object")
  ]
  coclass SDBProgress
  {
    [default] interface ISDBProgress;
  };

  [
    uuid(6BFDE5D2-6CC2-4F56-B5E7-D77E2BDBDFC1),
    version(1.0),
    helpstring("SDBSongData Object")
  ]
  coclass SDBSongData
  {
    [default] interface ISDBSongData;
  };

  [
    uuid(E3023C76-065D-4882-80CC-86D6C585EF90),
    version(1.0),
    helpstring("SDBSongIterator Object")
  ]
  coclass SDBSongIterator
  {
    [default] interface ISDBSongIterator;
  };

  [
    uuid(6D1A5B5D-E66B-41B5-8990-D876C697363C),
    version(1.0),
    helpstring("SDBSongList Object")
  ]
  coclass SDBSongList
  {
    [default] interface ISDBSongList;
  };

  [
    uuid(B49EB7C9-4F81-496F-8FDC-1CE6FBA6EB04),
    version(1.0),
    helpstring("SDBScriptControl Object")
  ]
  coclass SDBScriptControl
  {
    [default] interface ISDBScriptControl;
  };

  [
    uuid(AB97EDE4-091B-405F-83E6-9A31AD18EDAF),
    version(1.0),
    helpstring("SDBDropTarget")
  ]
  coclass SDBDropTarget
  {
    [default] interface ISDBDropTarget;
  };

  [
    uuid(14D51F54-D86B-4925-9BF6-5F582AF76FAA),
    version(1.0),
    helpstring("SDBDropTargetNext")
  ]
  coclass SDBDropTargetNext
  {
    [default] interface ISDBDropTarget;
  };

  [
    uuid(59924C9D-ED53-42AC-A2BA-1A5CA42D412D),
    version(1.0),
    helpstring("SDBDropTargetLast")
  ]
  coclass SDBDropTargetLast
  {
    [default] interface ISDBDropTarget;
  };

  [
    uuid(EDAAD31C-FEBC-4C21-BA3D-89388C6619CC),
    version(1.0),
    helpstring("SDBPlaylist Object")
  ]
  coclass SDBPlaylist
  {
    [default] interface ISDBPlaylist;
  };

  [
    uuid(0632ED14-116D-4CB4-B5E6-2945C4193D81),
    version(1.0),
    helpstring("SDBPlaylists Object")
  ]
  coclass SDBPlaylists
  {
    [default] interface ISDBPlaylists;
  };

  [
    uuid(553EDFDA-388A-475E-A5C1-2E80B96DE6F9),
    version(1.0),
    helpstring("SDBTree Object")
  ]
  coclass SDBTree
  {
    [default] interface ISDBTree;
  };

  [
    uuid(E6C73E13-7546-4A75-A53D-A97EDA76C941),
    version(1.0),
    helpstring("SDBTracksWindow Object")
  ]
  coclass SDBTracksWindow
  {
    [default] interface ISDBTracksWindow;
  };

  [
    uuid(9F1E992A-F117-4CB0-B077-7F050F8DF8E2),
    version(1.0),
    helpstring("SDBDBIterator Object")
  ]
  coclass SDBDBIterator
  {
    [default] interface ISDBDBIterator;
  };

  [
    uuid(1967A0F0-B926-47B5-876E-F548BD2C96BC),
    version(1.0),
    helpstring("SDBUIForm Object")
  ]
  coclass SDBUIForm
  {
    [default] interface ISDBUIForm;
    [default, source] dispinterface ISDBUIFormEvents;
  };

  [
    uuid(592BF4D1-7ACF-4177-B56C-3EDC680ABF14),
    version(1.0),
    helpstring("SDBUI Object")
  ]
  coclass SDBUI
  {
    [default] interface ISDBUI;
  };

  [
    uuid(47688C41-46E0-4879-9CD6-5585DD41055A),
    version(1.0),
    helpstring("SDBUIButton Object")
  ]
  coclass SDBUIButton
  {
    [default] interface ISDBUIButton;
    [default, source] dispinterface ISDBUIButtonEvents;
  };

  [
    uuid(80735E54-75C7-4E7F-9780-CA7774D6ABDB),
    version(1.0),
    helpstring("SDBUIEdit Object")
  ]
  coclass SDBUIEdit
  {
    [default] interface ISDBUIEdit;
    [default, source] dispinterface ISDBUIEditEvents;
  };

  [
    uuid(242AB4BE-7BC9-4148-9CB2-56894E0709E1),
    version(1.0),
    helpstring("SDBUIPanel Object")
  ]
  coclass SDBUIPanel
  {
    [default] interface ISDBUIPanel;
    [default, source] dispinterface ISDBUIPanelEvents;
  };

  [
    uuid(732E6889-F75C-4A07-8BA7-4F5414775FA4),
    version(1.0),
    helpstring("SDBUICheckBox Object")
  ]
  coclass SDBUICheckBox
  {
    [default] interface ISDBUICheckBox;
    [default, source] dispinterface ISDBUICheckBoxEvents;
  };

  [
    uuid(A60D63C8-A653-4726-BED7-2FB0F7ACEE4B),
    version(1.0),
    helpstring("SDBUITranspPanel Object")
  ]
  coclass SDBUITranspPanel
  {
    [default] interface ISDBUITranspPanel;
    [default, source] dispinterface ISDBUITranspPanelEvents;
  };

  [
    uuid(1339436D-4ECE-40B7-B861-26F7024181B2),
    version(1.0),
    helpstring("SDBUILabel Object")
  ]
  coclass SDBUILabel
  {
    [default] interface ISDBUILabel;
    [default, source] dispinterface ISDBUILabelEvents;
  };

  [
    uuid(DCAAEA6B-7A67-4F4D-93A5-23E565A8AE94),
    version(1.0),
    helpstring("SDBUIActiveX Object")
  ]
  coclass SDBUIActiveX
  {
    [default] interface ISDBUIActiveX;
    [default, source] dispinterface ISDBUIActiveXEvents;
  };

  [
    uuid(B8F819B6-7CF1-4C92-90C7-B3BD45BCAA8D),
    version(1.0),
    helpstring("SDBRegistry Object")
  ]
  coclass SDBRegistry
  {
    [default] interface ISDBRegistry;
  };

  [
    uuid(4F520AC5-5916-47EF-B229-612D73B6F543),
    version(1.0),
    helpstring("SDBUIDropDown Object")
  ]
  coclass SDBUIDropDown
  {
    [default] interface ISDBUIDropDown;
    [default, source] dispinterface ISDBUIDropDownEvents;
  };

  [
    uuid(92C40377-A07B-48E8-81AC-6ADCA700C536),
    version(1.0),
    helpstring("SDBMenuItem Object")
  ]
  coclass SDBMenuItem
  {
    [default] interface ISDBMenuItem;
    [default, source] dispinterface ISDBMenuItemEvents;
  };

  [
    uuid(1036EE86-E7FA-4188-8A8C-C8538DFEE8B8),
    version(1.0),
    helpstring("SDBDevice Object")
  ]
  coclass SDBDevice
  {
    [default] interface ISDBDevice;
  };

  [
    uuid(32EAD83F-AEEC-4F15-ABF6-C97186DD4EEE),
    version(1.0),
    helpstring("SDBTreeNode Object")
  ]
  coclass SDBTreeNode
  {
    [default] interface ISDBTreeNode;
    [default, source] dispinterface ISDBTreeNodeEvents;
  };

  [
    uuid(C259899B-D2B9-4F73-8E14-57EC3381BB05),
    version(1.0),
    helpstring("SDBUIRadioButton Object")
  ]
  coclass SDBUIRadioButton
  {
    [default] interface ISDBUIRadioButton;
    [default, source] dispinterface ISDBUIRadioButtonEvents;
  };

  [
    uuid(CF173AC2-17D1-45DE-9771-0B69EAB906A0),
    version(1.0),
    helpstring("SDBDeviceList Object")
  ]
  coclass SDBDeviceList
  {
    [default] interface ISDBDeviceList;
  };

  [
    uuid(41FC2986-BA3B-4827-A9D8-6E6B406BD808),
    version(1.0),
    helpstring("SDBTools Object")
  ]
  coclass SDBTools
  {
    [default] interface ISDBTools;
  };

  [
    uuid(259C512B-A4A2-4BB1-A0A4-BE2997F3C0B0),
    version(1.0),
    helpstring("SDBUISpinEdit Object")
  ]
  coclass SDBUISpinEdit
  {
    [default] interface ISDBUISpinEdit;
    [default, source] dispinterface ISDBUISpinEditEvents;
  };

  [
    uuid(148F7BB6-4943-4C53-8E30-0F9115D30283),
    version(1.0),
    helpstring("SDBApplication Object")
  ]
  coclass SDBApplication
  {
    [default] interface ISDBApplication;
    [default, source] dispinterface ISDBApplicationEvents;
  };

  [
    uuid(8F9F89DF-2252-4D71-9CA5-E3CD15DC7073),
    version(1.0),
    helpstring("SDBFileSystem Object")
  ]
  coclass SDBFileSystem
  {
    [default] interface ISDBFileSystem;
  };

  [
    uuid(64C870C4-35CA-4EC3-B548-DE48C1398E14),
    version(1.0),
    helpstring("SDBTextFile Object")
  ]
  coclass SDBTextFile
  {
    [default] interface ISDBTextFile;
  };

  [
    uuid(45A75B30-FEB8-48D3-B215-7E70602B47D8),
    version(1.0),
    helpstring("SDBTrackSynchStatus Object")
  ]
  coclass SDBTrackSynchStatus
  {
    [default] interface ISDBTrackSynchStatus;
  };

  [
    uuid(CBD2D647-2951-4B6B-9E4F-9F86460DFD5E),
    version(1.0),
    helpstring("SDBAlbumArtList Object")
  ]
  coclass SDBAlbumArtList
  {
    [default] interface ISDBAlbumArtList;
  };

  [
    uuid(271724C3-5F42-49FE-988D-B47D695B3BDA),
    version(1.0),
    helpstring("SDBAlbumArtItem Object")
  ]
  coclass SDBAlbumArtItem
  {
    [default] interface ISDBAlbumArtItem;
  };

  [
    uuid(17C64717-EFE8-44BA-AB8F-DCD34524DD31),
    version(1.0),
    helpstring("SDBImage Object")
  ]
  coclass SDBImage
  {
    [default] interface ISDBImage;
  };

  [
    uuid(0BA2D9E2-D4C8-45B2-8F5B-B3ADE5E461E6),
    version(1.0),
    helpstring("SDBHWEvents")
  ]
  coclass SDBHWEvents
  {
    [default] interface ISDBHWEvents;
  };

  [
    uuid(7903D765-DA8C-4CB9-ADF2-F88D82E6BFFE),
    version(1.0),
    helpstring("SDBDropTargetRip")
  ]
  coclass SDBDropTargetRip
  {
    [default] interface ISDBDropTarget;
  };

  [
    uuid(30BC8FC9-2E92-4134-B1A6-E376535D1415),
    version(1.0),
    helpstring("SDBUITrackBar Object")
  ]
  coclass SDBUITrackBar
  {
    [default] interface ISDBUITrackBar;
    [default, source] dispinterface ISDBUITrackBarEvents;
  };

  [
    uuid(778382D4-A8EF-4740-9FA9-F99C06664A3E),
    version(1.0),
    helpstring("SDBUIDockablePanel Object")
  ]
  coclass SDBUIDockablePanel
  {
    [default] interface ISDBUIDockablePanel;
    [default, source] dispinterface ISDBUIDockablePanelEvents;
  };

  [
    uuid(6B9AC9EF-BCAF-457F-A843-4987C87413C9),
    version(1.0),
    helpstring("SDBTimer Object")
  ]
  coclass SDBTimer
  {
    [default] interface ISDBTimer;
    [default, source] dispinterface ISDBTimerEvents;
  };

  [
    uuid(70488D17-1533-4FCC-A234-9320DB980E5E),
    version(1.0),
    helpstring("SDBUICommon Object")
  ]
  coclass SDBUICommon
  {
    [default] interface ISDBUICommon;
    [default, source] dispinterface ISDBUICommonEvents;
  };

  [
    uuid(11340F80-9B0E-4072-B2CB-2629379A956F),
    version(1.0),
    helpstring("SDBStringList Object")
  ]
  coclass SDBStringList
  {
    [default] interface ISDBStringList;
  };

  [
    uuid(BBCE8437-9449-4FF0-8D31-506ED45363E2),
    version(1.0),
    helpstring("SDBWebSearch Object")
  ]
  coclass SDBWebSearch
  {
    [default] interface ISDBWebSearch;
  };

  [
    uuid(366C9FB5-81D3-444B-AE20-4356693D55C4),
    version(1.0),
    helpstring("SDBUIGroupBox Object.")
  ]
  coclass SDBUIGroupBox
  {
    [default] interface ISDBUIGroupBox;
    [default, source] dispinterface ISDBUIGroupBoxEvents;
  };

  [
    uuid(EFEFBCE7-9D03-4306-91AA-783BB2308CE6),
    version(1.0),
    helpstring("SDBUIMultiLineEdit Object")
  ]
  coclass SDBUIMultiLineEdit
  {
    [default] interface ISDBUIMultiLineEdit;
    [default, source] dispinterface ISDBUIMultiLineEditEvents;
  };

  [
    uuid(7691E2DA-B335-4A3E-9938-D089B6343B4B),
    version(1.0),
    helpstring("SDBUIMaskEdit Object")
  ]
  coclass SDBUIMaskEdit
  {
    [default] interface ISDBUIMaskEdit;
    [default, source] dispinterface ISDBUIMaskEditEvents;
  };

  [
    uuid(95559831-7883-44C1-B160-C1A42A898325),
    version(1.0),
    helpstring("SDBUIListBox Object")
  ]
  coclass SDBUIListBox
  {
    [default] interface ISDBUIListBox;
    [default, source] dispinterface ISDBUIListBoxEvents;
  };

  [
    uuid(813E800A-D84E-46A7-A546-8F9E90C1D23D),
    version(1.0),
    helpstring("SDBTreeList Object")
  ]
  coclass SDBUITreeList
  {
    [default] interface ISDBUITreeList;
    [default, source] dispinterface ISDBUITreeListEvents;
  };

  [
    uuid(BE584DA2-FDDC-44B4-882F-3F0F901158D5),
    version(1.0),
    helpstring("SDBUITreeListItem Object")
  ]
  coclass SDBUITreeListItem
  {
    [default] interface ISDBUITreeListItem;
    [default, source] dispinterface ISDBUITreeListItemEvents;
  };

  [
    uuid(7907307C-05F4-4FDF-B853-955D137EFB79),
    version(1.0),
    helpstring("SDBDownloader object")
  ]
  coclass SDBDownloader
  {
    [default] interface ISDBDownloader;
  };

  [
    uuid(A53C6461-C3C4-4F6A-BAF2-08F9D566CABE),
    helpstring("List of Collections")
  ]
  coclass SDBCollections
  {
    [default] interface ISDBCollections;
  };

  [
    uuid(E3C887F3-186F-4A4F-AF26-7D2AC51F6063)
  ]
  coclass SDBCollection
  {
    [default] interface ISDBCollection;
  };

};
